<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>田大叔的博客</title>
  
  <subtitle>个人简历</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tiandashu.github.io/"/>
  <updated>2018-06-04T14:39:22.000Z</updated>
  <id>http://tiandashu.github.io/</id>
  
  <author>
    <name>田大叔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/vue-favicon%E8%AE%BE%E7%BD%AE/"/>
    <id>http://tiandashu.github.io/2018/06/04/vue-favicon设置/</id>
    <published>2018-06-04T14:58:50.217Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法1-修改webpack配置"><a href="#方法1-修改webpack配置" class="headerlink" title="方法1 修改webpack配置"></a>方法1 修改webpack配置</h1><blockquote><p>vue 中修改webpack配置使其正确显示, 版本如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;vue&quot;: &quot;^2.1.9&quot;,</span><br><span class="line">&quot;webpack&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">&quot;html-webpack-plugin&quot;: &quot;^2.28.0&quot;</span><br></pre></td></tr></table></figure><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">webpack.dev.conf.js</span><br><span class="line">    # div</span><br><span class="line">    let path = require(&apos;path&apos;) // 增加</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: &apos;index.html&apos;,</span><br><span class="line">      template: &apos;index.html&apos;,</span><br><span class="line">      inject: true,</span><br><span class="line">      favicon: path.resolve(&apos;favicon.ico&apos;) // 增加</span><br><span class="line">    &#125;),</span><br><span class="line">webpack.prod.conf.js</span><br><span class="line">    # prod</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: config.build.index,</span><br><span class="line">      template: &apos;index.html&apos;,</span><br><span class="line">      inject: true,</span><br><span class="line">      favicon: path.resolve(&apos;favicon.ico&apos;), //新增</span><br><span class="line">      minify: &#123;</span><br><span class="line">        removeComments: true,</span><br><span class="line">        collapseWhitespace: true,</span><br><span class="line">        removeAttributeQuotes: true</span><br><span class="line">        ...</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><blockquote><p>以上代码 笔者通过测试, 可以正确展示favicon图标</p></blockquote><h1 id="注意得重新打开dos窗口启动npm-run-dev"><a href="#注意得重新打开dos窗口启动npm-run-dev" class="headerlink" title="注意得重新打开dos窗口启动npm run dev"></a>注意得重新打开dos窗口启动npm run dev</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;方法1-修改webpack配置&quot;&gt;&lt;a href=&quot;#方法1-修改webpack配置&quot; class=&quot;headerlink&quot; title=&quot;方法1 修改webpack配置&quot;&gt;&lt;/a&gt;方法1 修改webpack配置&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;vue 中
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/Vue-js-%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    <id>http://tiandashu.github.io/2018/06/04/Vue-js-中使用第三方库/</id>
    <published>2018-06-04T14:58:50.217Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍一些在 Vue.js 中使用第三方库的方式.</p><h2 id="一、全局变量"><a href="#一、全局变量" class="headerlink" title="一、全局变量"></a>一、全局变量</h2><p>在项目中添加第三方库的最简单方式是讲其作为一个全局变量, 挂载到<code>window</code>对象上:</p><p><em>entry.js</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window._ = require(&apos;lodash&apos;);</span><br></pre></td></tr></table></figure><p><em>MyComponent.vue</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(_.isEmpty() ? &apos;Lodash everywhere!&apos; : &apos;Uh oh..&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式不适合于服务端渲染, 因为服务端没有<code>window</code>对象, 是<code>undefined</code>, 当试图去访问属性时会报错.</p><h2 id="二、在每个文件中引入"><a href="#二、在每个文件中引入" class="headerlink" title="二、在每个文件中引入"></a>二、在每个文件中引入</h2><p>另一个简单的方式是在每一个需要该库的文件中导入:</p><p><em>MyComponent.vue</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import _ from &apos;lodash&apos;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(_.isEmpty() ? &apos;Lodash is available here!&apos; : &apos;Uh oh..&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式是允许的, 但是比较繁琐, 并且带来的问题是: 你必须记住在哪些文件引用了该库, 如果项目不再依赖这个库时, 得去找到每一个引用该库的文件并删除该库的引用. 如果构建工具没设置正确, 可能导致该库的多份拷贝被引用.</p><h2 id="三、优雅的方式"><a href="#三、优雅的方式" class="headerlink" title="三、优雅的方式"></a>三、优雅的方式</h2><p>在 Vuejs 项目中使用 JavaScript 库的一个优雅方式是讲其代理到 Vue 的原型对象上去. 按照这种方式, 我们引入<code>Moment</code>库:</p><p><em>entry.js</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import moment from &apos;moment&apos;;</span><br><span class="line">Object.defineProperty(Vue.prototype, &apos;$moment&apos;, &#123; value: moment &#125;);</span><br></pre></td></tr></table></figure></p><p>由于所有的组件都会从 Vue 的原型对象上继承它们的方法, 因此在所有组件/实例中都可以通过<code>this.$moment:</code>的方式访问<code>Moment</code>而不需要定义全局变量或者手动的引入.</p><p><em>MyNewComponent.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&apos;The time is &apos; . this.$moment().format(&quot;HH:mm&quot;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就了解下这种方式的工作原理.</p><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h3><p>一般而言, 可以按照下面的方式来给对象设置属性:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$moment = moment;</span><br></pre></td></tr></table></figure><p>可以这样做, 但是<code>Object.defineProperty</code>允许我们通过一个<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">descriptor</a><br>来定义属性. Descriptor 运行我们去设置对象属性的一些底层(low-level)细节, 如是否允许属性可写? 是否允许属性在<code>for</code>循环中被遍历.<br>通常, 我们不会为此感到困扰, 因为大部分时候, 对于属性赋值, 我们不需要考虑这样的细节. 但这有一个明显的优点:<br><strong>通过 descriptor 创建的属性默认是只读的</strong>.<br>这就意味着, 一些处于迷糊状态的(coffee-deprived)开发者不能在组件内去做一些很愚蠢的事情, 就像这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.$http = &apos;Assign some random thing to the instance method&apos;;</span><br><span class="line">this.$http.get(&apos;/&apos;); // TypeError: this.$http.get is not a function</span><br></pre></td></tr></table></figure><p>此外, 试图给只读实例的方法重新赋值会得到<code>TypeError: Cannot assign to read only property</code>的错误.</p><h3 id=""><a href="#" class="headerlink" title="$"></a>$</h3><p>你可能会注意到, 代理第三库的属性会有一个<code>$</code>前缀, 也可能看到其它类似<code>$refs, $on, $mount</code>的属性和方式, 它们也有这个前缀.<br>这个不是强制要求, 给属性添加<code>$</code>前缀是提供那些处于迷糊状态(coffee-deprived)的开发者这是一个公开的 API, 和 Vuejs 的一些内部属性和方法区分开来.</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>你还可能注意到, 在组件内是通过<code>this.libraryName</code>的方式来使用第三方库的, 当你知道它是一个实例方法时就不会感到意外了. 但与全局变量不同, 通过<code>this</code>来使用第三方库时, 必须确保<code>this</code>处于正确的作用域. 在回调方法中<code>this</code>的作用域会有不同, 但箭头式回调风格能保证<code>this</code>的作用域是正确的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this.$http.get(&apos;/&apos;).then(res =&gt; &#123;</span><br><span class="line">  if (res.status !== 200) &#123;</span><br><span class="line">    this.$http.get(&apos;/&apos;) // etc</span><br><span class="line">    // Only works in a fat arrow callback.</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>如果你想在多个项目中使用同一个库, 或者想将其分享给其他人, 可以将其写成一个插件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import MyLibraryPlugin from &apos;my-library-plugin&apos;;</span><br><span class="line">Vue.use(MyLibraryPlugin);</span><br></pre></td></tr></table></figure></p><p>在应用的入口引入插件之后, 就可以在任何一个组件内像使用<code>Vue Router</code>,<code>Vuex</code>一样使用你定义的库了.</p><h3 id="写一个插件"><a href="#写一个插件" class="headerlink" title="写一个插件"></a>写一个插件</h3><p>首先, 创建一个文件用于编写自己的插件. 在示例中, 我会将<code>Axios</code>作为插件添加到项目中, 因而我给文件起名为<em>axios.js</em>. 其次, 插件要对外暴露一个<code>install</code>方法, 该方法的第一个参数是<code>Vue</code>的构造函数:</p><p><em>axios.js</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  install: function(Vue) &#123;</span><br><span class="line">    // Do stuff</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以使用先前将库添加到原型对象上的方法:</p><p><em>axios.js</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  install: function(Vue,) &#123;</span><br><span class="line">    Object.defineProperty(Vue.prototype, &apos;$http&apos;, &#123; value: axios &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后, 利用<code>Vue</code>的实例方法<code>use</code>将插件添加到项目中:</p><p><em>entry.js</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import AxiosPlugin from &apos;./axios.js&apos;;</span><br><span class="line">Vue.use(AxiosPlugin);</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(this.$http ? &apos;Axios works!&apos; : &apos;Uh oh..&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="彩蛋-插件的可选参数"><a href="#彩蛋-插件的可选参数" class="headerlink" title="彩蛋: 插件的可选参数"></a>彩蛋: 插件的可选参数</h3><p>插件的<code>install</code>方法可以接受可选参数. 一些开发可能不喜欢将<code>Axios</code>实例命名为<code>$http</code>, 因为这是 Vue Resource 提供的一个通用名字. 因而可以提供一个可选的参数允许他们随意命名:</p><p><em>axions.js</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  install: function(Vue, name = &apos;$http&apos;) &#123;</span><br><span class="line">    Object.defineProperty(Vue.prototype, name, &#123; value: axios &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>entry.js</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import AxiosPlugin from &apos;./axios.js&apos;;</span><br><span class="line">Vue.use(AxiosPlugin, &apos;$axios&apos;);</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(this.$axios ? &apos;Axios works!&apos; : &apos;Uh oh..&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>转载自<a href="https://github.com/dwqs/blog/issues/51，仅供本人自学留存，如有特殊需要请联系作者本人" target="_blank" rel="noopener">https://github.com/dwqs/blog/issues/51，仅供本人自学留存，如有特殊需要请联系作者本人</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文将介绍一些在 Vue.js 中使用第三方库的方式.&lt;/p&gt;
&lt;h2 id=&quot;一、全局变量&quot;&gt;&lt;a href=&quot;#一、全局变量&quot; class=&quot;headerlink&quot; title=&quot;一、全局变量&quot;&gt;&lt;/a&gt;一、全局变量&lt;/h2&gt;&lt;p&gt;在项目中添加第三方库的最简单方式是讲其
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/Vue%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    <id>http://tiandashu.github.io/2018/06/04/Vue语法（二）：生命周期和钩子函数/</id>
    <published>2018-06-04T14:58:50.217Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue生命周期简介"><a href="#vue生命周期简介" class="headerlink" title="vue生命周期简介"></a>vue生命周期简介</h2><p><img src="http://upload-images.jianshu.io/upload_images/2598877-cba7b0e661a89dd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3504099265-580628fd03258_articlex.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/2598877-a6f0285b1bafd204.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3346068135-580822cd52898_articlex.png"></p><p>咱们从上图可以很明显的看出现在<code>vue2.0</code>都包括了哪些生命周期的函数了。</p><h2 id="生命周期探究"><a href="#生命周期探究" class="headerlink" title="生命周期探究"></a>生命周期探究</h2><p>对于执行顺序和什么时候执行，看上面两个图基本有个了解了。下面我们将结合代码去看看钩子函数的执行。</p><blockquote><p>ps:下面代码可以直接复制出去执行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/vue/2.1.3/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">     &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">  var app = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">          message : &quot;xuxiao is boy&quot; </span><br><span class="line">      &#125;,</span><br><span class="line">       beforeCreate: function () &#123;</span><br><span class="line">                console.group(&apos;beforeCreate 创建前状态===============》&apos;);</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot; , &quot;el     : &quot; + this.$el); //undefined</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //undefined </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message)  </span><br><span class="line">        &#125;,</span><br><span class="line">        created: function () &#123;</span><br><span class="line">            console.group(&apos;created 创建完毕状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el); //undefined</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //已被初始化 </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); //已被初始化</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount: function () &#123;</span><br><span class="line">            console.group(&apos;beforeMount 挂载前状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + (this.$el)); //已被初始化</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //已被初始化  </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); //已被初始化  </span><br><span class="line">        &#125;,</span><br><span class="line">        mounted: function () &#123;</span><br><span class="line">            console.group(&apos;mounted 挂载结束状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el); //已被初始化</span><br><span class="line">            console.log(this.$el);    </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //已被初始化</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); //已被初始化 </span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate: function () &#123;</span><br><span class="line">            console.group(&apos;beforeUpdate 更新前状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">            console.log(this.$el);   </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        updated: function () &#123;</span><br><span class="line">            console.group(&apos;updated 更新完成状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">            console.log(this.$el); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy: function () &#123;</span><br><span class="line">            console.group(&apos;beforeDestroy 销毁前状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">            console.log(this.$el);    </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed: function () &#123;</span><br><span class="line">            console.group(&apos;destroyed 销毁完成状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">            console.log(this.$el);  </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="create-和-mounted-相关"><a href="#create-和-mounted-相关" class="headerlink" title="create 和 mounted 相关"></a>create 和 mounted 相关</h3><p>咱们在<code>chrome</code>浏览器里打开，<code>F12</code>看<code>console</code>就能发现</p><p> <code>beforecreated</code>：el 和 data 并未初始化<br><code>created</code>:完成了 data 数据的初始化，el没有<br><code>beforeMount</code>：完成了 el 和 data 初始化<br> <code>mounted</code> ：完成挂载<br>另外在标红处，我们能发现el还是 ，这里就是应用的<code>Virtual DOM</code>（虚拟Dom）技术，先把坑占住了。到后面<code>mounted</code>挂载的时候再把值渲染进去。<br>[图片上传失败…(image-a04fc4-1511244824201)]</p><h3 id="update-相关"><a href="#update-相关" class="headerlink" title="update 相关"></a>update 相关</h3><p>这里我们在 chrome console里执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.message= &apos;yes !! I do&apos;;</span><br></pre></td></tr></table></figure><p>下面就能看到data里的值被修改后，将会触发update的操作。</p><p>[图片上传失败…(image-a86f64-1511244824201)]</p><h4 id="destroy-相关"><a href="#destroy-相关" class="headerlink" title="destroy 相关"></a>destroy 相关</h4><p>有关于销毁，暂时还不是很清楚。我们在console里执行下命令对 vue实例进行销毁。销毁完成后，我们再重新改变message的值，vue不再对此动作进行响应了。但是原先生成的dom元素还存在，可以这么理解，执行了destroy操作，后续就不再受vue控制了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.$destroy();</span><br></pre></td></tr></table></figure><p>[图片上传失败…(image-4a46dd-1511244824200)]</p><h2 id="生命周期总结"><a href="#生命周期总结" class="headerlink" title="生命周期总结"></a>生命周期总结</h2><p>这么多钩子函数，我们怎么用呢，我想大家可能有这样的疑问吧，我也有，哈哈哈。 举个例子<br> <code>beforecreate</code> ：可以在这加个loading事件<br> <code>created</code> ：在这结束loading，还做一些初始化，实现函数自执行<br> <code>mounted</code>  在这发起后端请求，拿回数据，配合路由钩子做一些事情<br><code>beforeDestory</code>： 你确认删除XX吗？ destoryed ：当前组件已被删除，清空相关内容</p><p>当然，还有更多，继续探索中……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue生命周期简介&quot;&gt;&lt;a href=&quot;#vue生命周期简介&quot; class=&quot;headerlink&quot; title=&quot;vue生命周期简介&quot;&gt;&lt;/a&gt;vue生命周期简介&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E8%A7%A3/"/>
    <id>http://tiandashu.github.io/2018/06/04/vue生命周期图解/</id>
    <published>2018-06-04T14:58:50.217Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天发现了一个关于vue生命周期的神器，可以帮助大家深入理解vue的生命周期。哈哈</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/2598877-06ad33ed1d4245c1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue生命周期详解.jpg"></p><ul><li>每个钩子函数都在啥时间触发<br>beforeCreate</li><li>在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</li></ul><p>created</p><ul><li>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</li></ul><p>beforeMount</p><ul><li>在挂载开始之前被调用：相关的 render 函数首次被调用。</li></ul><p>mounted</p><ul><li>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</li></ul><p>beforeUpdate</p><ul><li>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li></ul><p>updated</p><ul><li>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li><li>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。<br>该钩子在服务器端渲染期间不被调用。</li></ul><p>beforeDestroy</p><ul><li>实例销毁之前调用。在这一步，实例仍然完全可用。</li></ul><p>destroyed</p><ul><li>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天发现了一个关于vue生命周期的神器，可以帮助大家深入理解vue的生命周期。哈哈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/25988
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/vue-notice/"/>
    <id>http://tiandashu.github.io/2018/06/04/vue-notice/</id>
    <published>2018-06-04T14:58:50.217Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue注意"><a href="#vue注意" class="headerlink" title="vue注意"></a>vue注意</h3><p>1、vue data中的字符串需要用单引号包裹,否则会出错<br>2、使用vue-cli构建的项目在ie8+上不兼容的解决方案：给项目的webpack入口配置Polyfill<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save babel-polyfill</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: [&apos;babel-polyfill&apos;,&apos;./src/main.js&apos;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="vuex注意"><a href="#vuex注意" class="headerlink" title="vuex注意"></a>vuex注意</h3><p>1、在子组件中获取vuex中的状态信息，不应该直接在子组件中的data中赋值，因为这样会导致状态不同步，始终是获取到的初始状态值</p><h3 id="vue-cli项目结构的资源路径问题"><a href="#vue-cli项目结构的资源路径问题" class="headerlink" title="vue-cli项目结构的资源路径问题"></a>vue-cli项目结构的资源路径问题</h3><p>在assets下的资源是会被webpack打包，使用相对路径的方式引入</p><p>在static下的资源webpack不会打包，如果是在html部分引入使用绝对路径/static/…;如果是在script或者style中引入使用相对路径./../../static</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue注意&quot;&gt;&lt;a href=&quot;#vue注意&quot; class=&quot;headerlink&quot; title=&quot;vue注意&quot;&gt;&lt;/a&gt;vue注意&lt;/h3&gt;&lt;p&gt;1、vue data中的字符串需要用单引号包裹,否则会出错&lt;br&gt;2、使用vue-cli构建的项目在ie8+上不兼容
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/Vue%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>http://tiandashu.github.io/2018/06/04/Vue语法（一）：常用指令/</id>
    <published>2018-06-04T14:58:50.217Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li>解释：指令 (Directives) 是带有 <code>v-</code>前缀的特殊属性</li><li>作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</li></ul><h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><ul><li>v-text</li><li>v-html</li><li>v-bind</li></ul><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><ul><li>解释：更新元素的 textContent</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-text=&quot;msg&quot;&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><ul><li>解释：更新元素的 innerHTML</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-html=&quot;msg&quot;&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><ul><li>作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</li><li>语法：<code>v-bind:title=&quot;msg&quot;</code></li><li>简写：<code>:title=&quot;msg&quot;</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 2 创建 Vue 的实例对象</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      // el 用来指定vue挂载到页面中的元素，值是：选择器</span><br><span class="line">      // 理解：用来指定vue管理的HTML区域</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      // 数据对象，用来给视图中提供数据的</span><br><span class="line">      data: &#123;</span><br><span class="line">        url: &apos;http://www.baidu.com&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><ul><li>作用：绑定事件</li><li>语法：<code>v-on:click=&quot;say&quot;</code> or <code>v-on:click=&quot;say(&#39;参数&#39;, $event)&quot;</code></li><li>简写：<code>@click=&quot;say&quot;</code></li><li>说明：绑定的事件从<code>methods</code>中获取</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 方法传参 --&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething（“123”）&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">    // 2 创建 Vue 的实例对象</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      // methods属性用来给vue实例提供方法（事件）</span><br><span class="line">      methods: &#123;</span><br><span class="line">        doSomething: function(str) &#123;</span><br><span class="line">          //接受参数，并输出</span><br><span class="line">          console.log(str);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><ul><li><code>.stop</code>阻止冒泡，调用 event.stopPropagation()</li><li><code>.prevent</code> 阻止默认事件，调用 event.preventDefault()</li><li><code>.capture</code>添加事件侦听器时使用事件<code>捕获</code>模式</li><li><code>.self</code>只当事件在该元素本身（比如不是子元素）触发时触发回调</li><li><code>.once</code> 事件只触发一次</li></ul><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><ul><li>作用：在表单元素上创建双向数据绑定</li><li>说明：监听用户的输入事件以更新数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</span><br><span class="line">&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><ul><li>作用：基于源数据多次渲染元素或模板块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1 基础用法 --&gt;</span><br><span class="line">&lt;div v-for=&quot;item in items&quot;&gt;</span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- item 为当前项，index 为索引 --&gt;</span><br><span class="line">&lt;p v-for=&quot;(item, index) in list&quot;&gt;&#123;&#123;item&#125;&#125; -- &#123;&#123;index&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;!-- item 为值，key 为键，index 为索引 --&gt;</span><br><span class="line">&lt;p v-for=&quot;(item, key, index) in obj&quot;&gt;&#123;&#123;item&#125;&#125; -- &#123;&#123;key&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p v-for=&quot;item in 10&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h4 id="key属性"><a href="#key属性" class="headerlink" title="key属性"></a>key属性</h4><ul><li>推荐：使用 <code>v-for</code> 的时候提供<code>key</code>属性，以获得性能提升。</li><li>说明：使用 key，VUE会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">  &lt;!-- 内容 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="样式处理-class和style"><a href="#样式处理-class和style" class="headerlink" title="样式处理 -class和style"></a>样式处理 -class和style</h3><ul><li>说明：这两个都是HTML元素的属性，使用<code>v-bind</code>，只需要通过表达式计算出字符串结果即可</li><li>表达式的类型：字符串、数组、对象</li><li>语法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1 --&gt;</span><br><span class="line">&lt;div v-bind:class=&quot;&#123; active: true &#125;&quot;&gt;&lt;/div&gt; ===&gt;</span><br><span class="line">&lt;div class=&quot;active&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 2 --&gt;</span><br><span class="line">&lt;div :class=&quot;[&apos;active&apos;, &apos;text-danger&apos;]&quot;&gt;&lt;/div&gt; ===&gt;</span><br><span class="line">&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 3 --&gt;</span><br><span class="line">&lt;div v-bind:class=&quot;[&#123; active: true &#125;, errorClass]&quot;&gt;&lt;/div&gt; ===&gt;</span><br><span class="line">&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">--- style ---</span><br><span class="line">&lt;!-- 1 --&gt;</span><br><span class="line">&lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize + &apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- 2 将多个 样式对象 应用到一个元素上--&gt;</span><br><span class="line">&lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="v-if-和-v-show"><a href="#v-if-和-v-show" class="headerlink" title="v-if 和 v-show"></a>v-if 和 v-show</h4><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fconditional.html" target="_blank" rel="noopener">条件渲染</a></li><li><code>v-if</code>：根据表达式的值的真假条件，销毁或重建元素</li><li><code>v-show</code>：根据表达式之真假值，切换元素的 display CSS 属性</li></ul><h4 id="提升用户体验：v-cloak"><a href="#提升用户体验：v-cloak" class="headerlink" title="提升用户体验：v-cloak"></a>提升用户体验：v-cloak</h4><ul><li>这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</li><li>防止刷新页面，网速慢的情况下出现等数据格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-cloak&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="提升性能：v-pre"><a href="#提升性能：v-pre" class="headerlink" title="提升性能：v-pre"></a>提升性能：v-pre</h4><ul><li>说明：跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-pre&gt;&#123;&#123; this will not be compiled &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h4 id="提升性能：v-once"><a href="#提升性能：v-once" class="headerlink" title="提升性能：v-once"></a>提升性能：v-once</h4><ul><li>说明：只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-once&gt;This will never change: &#123;&#123;msg&#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;指令&quot;&gt;&lt;a href=&quot;#指令&quot; class=&quot;headerlink&quot; title=&quot;指令&quot;&gt;&lt;/a&gt;指令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;解释：指令 (Directives) 是带有 &lt;code&gt;v-&lt;/code&gt;前缀的特殊属性&lt;/li&gt;
&lt;li&gt;作用：当表达式的值
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/vue-devtools%E9%85%8D%E7%BD%AE/"/>
    <id>http://tiandashu.github.io/2018/06/04/vue-devtools配置/</id>
    <published>2018-06-04T14:58:50.201Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>npmvue-devtools的安装与使用<br>一、在github上下载压缩包，github下载地址：<a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">https://github.com/vuejs/vue-devtools</a><br>二、解压到本地的某盘<br>三、用你的npm中进入该文件夹下<br>四、依次输执行:<br>1、npm install<br>2 、npm run build   (这一步一定不要忘了，没有执行这一步的话，项目文件夹shells&gt;chrome文件夹里会少一个src文件夹,如下图)<br><img src="http://upload-images.jianshu.io/upload_images/2598877-cb3ae4e28ba3daec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>五、修改shells&gt;chrome文件夹下的mainifest.json 中的persistent为true<br><img src="http://upload-images.jianshu.io/upload_images/2598877-63d6495dc6edf6c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>六、我们找到谷歌浏览器的扩展程序功能，勾选开发者模式，然后我们将插件文件夹里的shells&gt;chorme文件夹直接拖到页面中，完成安装。<br>（注意：如果我们没有执行第四部的npm run build，在这里会报错：无法加载背景脚本”build/background.js”）<br>七、在插件的目录下执行npm run dev，这个时候我们的插件就可以运行了,打开localhost:8080可以看到插件已经安装并运行了。<br><img src="http://upload-images.jianshu.io/upload_images/2598877-c243c6c5a2f58f63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>八、我们在打开本地的其他项目时，就不需要在vue-devtools文件夹下执行npm run dev了，因为这个插件已经安装在浏览器中。接下来就愉快的调试你的vue项目吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;npmvue-devtools的安装与使用&lt;br&gt;一、在github上下载压缩包，github下载地址：&lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/vue-cli%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%92%8C%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/"/>
    <id>http://tiandashu.github.io/2018/06/04/vue-cli环境：开发环境和生产环境跨域设置/</id>
    <published>2018-06-04T14:58:50.201Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>在开发环境中配置代理来解决跨域<br>1、在config – index.js 中配置<br><img src="http://upload-images.jianshu.io/upload_images/2598877-5e7673a09b5fa977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM图片20171108142449.png"><br>2、使用axios请求配置<img src="http://upload-images.jianshu.io/upload_images/2598877-846933ef0e5f28f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM图片20171108143050.png"><br>3、使用直接通过配置好的axios请求接口地址就好<br><img src="http://upload-images.jianshu.io/upload_images/2598877-3dc1cb7cdfa7858e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM图片20171108171216.png"></p><h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><p>在生产环境跨域请求需要在服务端配合设置，解决No ‘Access-Control-Allow-Origin’的问题<br><a href="http://www.cnblogs.com/hcy1994/p/6241395.html" target="_blank" rel="noopener">http://www.cnblogs.com/hcy1994/p/6241395.html</a><br>看了tomcat的配置文档，弄了一个，问题就解决了。</p><p>打开tomcat安装目录 -&gt; 打开 conf 目录 -&gt; 打开web.xml文件<br>将如下代码复制到web.xml文件中(我是放在 460左右的位置，不要放在最前面和最后面，一定要放中间)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;CorsFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-class&gt;org.apache.catalina.filters.CorsFilter&lt;/filter-class&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;cors.allowed.origins&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;*&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;cors.allowed.methods&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;GET,POST,HEAD,OPTIONS,PUT&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;cors.allowed.headers&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;*&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;cors.exposed.headers&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;Access-Control-Allow-Origin,Access-Control-Allow-Credentials&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;cors.support.credentials&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line"></span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">&lt;filter-name&gt;CorsFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h2&gt;&lt;p&gt;在开发环境中配置代理来解决跨域&lt;br&gt;1、在config – index.js 中配置&lt;br&gt;&lt;img src=&quot;http:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/vue-cli%E9%85%8D%E7%BD%AEscss/"/>
    <id>http://tiandashu.github.io/2018/06/04/vue-cli配置scss/</id>
    <published>2018-06-04T14:58:50.201Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一步 安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install node-sass --save-dev</span><br><span class="line">cnpm install sass-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>第二步 打开webpack.base.config.js在loaders里面加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: /\.scss$/,</span><br><span class="line">  loaders: [&quot;style&quot;, &quot;css&quot;, &quot;sass&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第三步 在需要用到scss的地方写上 lang=”scss”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>第四步 为了识别scss语法添加rel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped rel=&quot;stylesheet/scss&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一步 安装&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/Vue%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE/"/>
    <id>http://tiandashu.github.io/2018/06/04/Vue语法（一）：全局配置/</id>
    <published>2018-06-04T14:58:50.201Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>改项目是基于vue-cli 构建的，vue -V 2.9.1</p></blockquote><h3 id="一、全局配置"><a href="#一、全局配置" class="headerlink" title="一、全局配置"></a>一、全局配置</h3><p>Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前修改配置属性：</p><p><img src="http://upload-images.jianshu.io/upload_images/2598877-a09d3deccc68deb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>Vue的全局配置可以在main.js中直接配置，也可以在子组件中通过引入vue的方式配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//在子组件中配置</span><br><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">Vue.config.silent = true;</span><br><span class="line">//注意如果是在子组件中设置的话仅仅是改子组件的报错信息不显示了，不会影响到别的组件</span><br></pre></td></tr></table></figure></p><ul><li>Vue.config.silent = true<br>默认值：false<br>取消 Vue 所有的日志与警告。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;改项目是基于vue-cli 构建的，vue -V 2.9.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、全局配置&quot;&gt;&lt;a href=&quot;#一、全局配置&quot; class=&quot;headerlink&quot; title=&quot;一、全局配置&quot;&gt;&lt;/a&gt;一、全
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://tiandashu.github.io/2018/06/04/项目总结/</id>
    <published>2018-06-04T14:58:50.201Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>###1.注意接口和路径格式对应</p><p>#####1.1第一种写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//页面代码</span><br><span class="line"> &lt;!--所有城市--&gt;</span><br><span class="line">     &lt;section class=&quot;group_city_container&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;letter_classify&quot;&gt;</span><br><span class="line">          &lt;li v-for=&quot;(value,key,index) in sortgroupcity&quot; :key=&quot;key&quot; class=&quot;letter_classify_li&quot;&gt;</span><br><span class="line">             &lt;h4 class=&quot;city_title&quot;&gt;</span><br><span class="line">               &#123;&#123;key&#125;&#125;</span><br><span class="line">               &lt;span v-if=&quot;index == 0&quot;&gt;(按字母排序)&lt;/span&gt;</span><br><span class="line">             &lt;/h4&gt;</span><br><span class="line">            &lt;ul class=&quot;groupcity_name_container citylistul clear&quot;&gt;</span><br><span class="line">               &lt;router-link tag=&quot;li&quot; v-for=&quot;item in value&quot; :to=&quot;&apos;/city/&apos;+item.id&quot; :key=&quot;item.id&quot; class=&quot;ellipsis&quot;&gt;</span><br><span class="line">                  &#123;&#123;item.name&#125;&#125;</span><br><span class="line">               &lt;/router-link&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">     &lt;/section&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//路由router.js, 注意path的写法</span><br><span class="line">    &#123;</span><br><span class="line">          path:&apos;/city/:cityid&apos;,</span><br><span class="line">          name:&apos;city&apos;,</span><br><span class="line">          component:city</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//地址栏的路径：</span><br><span class="line">http://localhost:8088/#/city/10</span><br></pre></td></tr></table></figure><p>#####1.2第二种写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//页面代码</span><br><span class="line"> &lt;!--所有城市--&gt;</span><br><span class="line">     &lt;section class=&quot;group_city_container&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;letter_classify&quot;&gt;</span><br><span class="line">          &lt;li v-for=&quot;(value,key,index) in sortgroupcity&quot; :key=&quot;key&quot; class=&quot;letter_classify_li&quot;&gt;</span><br><span class="line">             &lt;h4 class=&quot;city_title&quot;&gt;</span><br><span class="line">               &#123;&#123;key&#125;&#125;</span><br><span class="line">               &lt;span v-if=&quot;index == 0&quot;&gt;(按字母排序)&lt;/span&gt;</span><br><span class="line">             &lt;/h4&gt;</span><br><span class="line">            &lt;ul class=&quot;groupcity_name_container citylistul clear&quot;&gt;</span><br><span class="line">               &lt;router-link tag=&quot;li&quot; v-for=&quot;item in value&quot; :to=&quot;&apos;/city1&apos;+item.id&quot; :key=&quot;item.id&quot; class=&quot;ellipsis&quot;&gt;</span><br><span class="line">                  &#123;&#123;item.name&#125;&#125;</span><br><span class="line">               &lt;/router-link&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">     &lt;/section&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//路由router.js, 注意path的写法</span><br><span class="line">    &#123;</span><br><span class="line">          path:&apos;/city:cityid&apos;,</span><br><span class="line">          name:&apos;city&apos;,</span><br><span class="line">          component:city</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//地址栏的路径：</span><br><span class="line">http://localhost:8088/#/city10</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###1.注意接口和路径格式对应&lt;/p&gt;
&lt;p&gt;#####1.1第一种写法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-Vue-%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
    <id>http://tiandashu.github.io/2018/06/04/深入理解-Vue-单向数据流/</id>
    <published>2018-06-04T14:58:50.201Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="https://juejin.im/entry/59e8b8a8518825579d131e51" target="_blank" rel="noopener">https://juejin.im/entry/59e8b8a8518825579d131e51</a></p><h3 id="1、v-model-用在-input-元素上"><a href="#1、v-model-用在-input-元素上" class="headerlink" title="1、v-model 用在 input 元素上"></a>1、v-model 用在 input 元素上</h3><p>v-model在使用的时候很像双向绑定的（实际上也是。。。），但是 Vue 是单项数据流，v-model 只是语法糖而已：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;something&quot; /&gt;</span><br><span class="line">&lt;input v-bind:value=&quot;something&quot; v-on:input=&quot;something = $event.target.value&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>第一行的代码其实只是第二行的语法糖。然后第二行代码还能简写成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input :value=&quot;something&quot; @input=&quot;something = $event.target.value&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>要理解这行代码，首先你要知道 input 元素本身有个 oninput 事件，这是 HTML5 新增加的，类似 onchange ，每当输入框内容发生变化，就会触发 oninput ，通过 $event 把最新的 value 传递给 something。</p><blockquote><p>我们仔细观察语法糖和原始语法那两行代码，可以得出一个结论： 在给 input 元素添加 v-model 属性时，默认会把 value 作为元素的属性，然后把 ‘input’ 事件作为实时传递 value 的触发事件</p></blockquote><h3 id="2、v-model-用在组件上"><a href="#2、v-model-用在组件上" class="headerlink" title="2、v-model 用在组件上"></a>2、v-model 用在组件上</h3><p>v-model 不仅仅能在 input 上用，在组件上也能使用，拿官网上的demo看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;currency-input v-model=&quot;price&quot;&gt;&lt;/currency-input&gt;</span><br><span class="line">Vue.component(&apos;currency-input&apos;, &#123;</span><br><span class="line">  template: &apos;\</span><br><span class="line">    &lt;span&gt;\</span><br><span class="line">      $\</span><br><span class="line">      &lt;input\</span><br><span class="line">        ref=&quot;input&quot;\</span><br><span class="line">        v-bind:value=&quot;value&quot;\</span><br><span class="line">        v-on:input=&quot;updateValue($event.target.value)&quot;\</span><br><span class="line">      &gt;\</span><br><span class="line">    &lt;/span&gt;\ &apos;,</span><br><span class="line">  props: [&apos;value&apos;], // 为什么这里要用 value 属性，value在哪里定义的？</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</span><br><span class="line">    updateValue: function (value) &#123;</span><br><span class="line">      var formattedValue = value</span><br><span class="line">        // 删除两侧的空格符</span><br><span class="line">        .trim()</span><br><span class="line">        // 保留 2 位小数</span><br><span class="line">        .slice(</span><br><span class="line">          0,</span><br><span class="line">          value.indexOf(&apos;.&apos;) === -1</span><br><span class="line">            ? value.length</span><br><span class="line">            : value.indexOf(&apos;.&apos;) + 3</span><br><span class="line">        )</span><br><span class="line">      // 如果值尚不合规，则手动覆盖为合规的值</span><br><span class="line">      if (formattedValue !== value) &#123;</span><br><span class="line">        this.$refs.input.value = formattedValue</span><br><span class="line">      &#125;</span><br><span class="line">      // 通过 input 事件带出数值</span><br><span class="line">      // &lt;!--为什么这里把 &apos;input&apos; 作为触发事件的事件名？`input` 在哪定义的？--&gt;</span><br><span class="line">      this.$emit(&apos;input&apos;, Number(formattedValue))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>如果你知道这两个问题的答案，那么恭喜你真正掌握了 v-model，如果你没明白，那么可以看下这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;currency-input v-model=&quot;price&quot;&gt;&lt;/currency-input&gt;</span><br><span class="line">所以在组件中使用时，它相当于下面的简写：</span><br><span class="line">//上行代码是下行的语法糖</span><br><span class="line">&lt;currency-input :value=&quot;price&quot; @input=&quot;price = arguments[0]&quot;&gt;&lt;/currency-input&gt;</span><br></pre></td></tr></table></figure></p><p>所以，给组件添加 v-model 属性时，默认会把 value 作为组件的属性，然后把 ‘input’ 值作为给组件绑定事件时的事件名。这在写组件时特别有用。</p><h3 id="3、v-model-的缺点和解决办法"><a href="#3、v-model-的缺点和解决办法" class="headerlink" title="3、v-model 的缺点和解决办法"></a>3、v-model 的缺点和解决办法</h3><p>在创建类似复选框或者单选框的常见组件时，v-model就不好用了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot; v-model=&quot;something&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>v-model 给我们提供好了 value 属性和 oninput 事件，但是，我们需要的不是 value 属性，而是 checked 属性，并且当你点击这个单选框的时候不会触发 oninput 事件，它只会触发 onchange 事件。</p><blockquote><p>因为 v-model 只是用到了 input 元素上，所以这种情况好解决：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot; :checked=&quot;value&quot; @change=&quot;change(value, $event)&quot;</span><br></pre></td></tr></table></figure><p>当 v-model 用到组件上时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;checkbox v-model=&quot;value&quot;&gt;&lt;/checkbox&gt;</span><br><span class="line">Vue.component(&apos;checkbox&apos;, &#123;</span><br><span class="line">  tempalte: &apos;&lt;input type=&quot;checkbox&quot; @change=&quot;change&quot; :checked=&quot;currentValue&quot;/&gt;&apos;</span><br><span class="line">  props: [&apos;value&apos;],</span><br><span class="line">  data: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            //这里为什么要定义一个局部变量，并用 prop 的值初始化它。</span><br><span class="line">            currentValue: this.value</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    change: function ($event) &#123;</span><br><span class="line">      this.currentValue = $event.target.checked;</span><br><span class="line">      this.$emit(&apos;input&apos;, this.currentValue);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在 Vue 2.2 版本，你可以在定义组件时通过 model 选项的方式来定制 prop/event 。</p><h3 id="4、vue-组件数据流"><a href="#4、vue-组件数据流" class="headerlink" title="4、vue 组件数据流"></a>4、vue 组件数据流</h3><p>从上面 v-model 的分析我们可以这么理解，双向数据绑定就是在单向绑定的基础上给可输入元素（input、textare等）添加了 change(input) 事件，来动态修改 model 和 view ，即通过触发（$emit）父组件的事件来修改mv来达到 mvvm 的效果。而 vue 组件间传递数据是单向的，即数据总是由父组件传递到子组件，子组件在其内部可以有自己维护的数据，但它无权修改父组件传递给它的数据，当开发者尝试这样做的时候，vue 将会报错。这样做是为了组件间更好的解耦，在开发中可能有多个子组件依赖于父组件的某个数据，假如子组件可以修改父组件数据的话，一个子组件变化会引发所有依赖这个数据的子组件发生变化，所以 vue 不推荐子组件修改父组件的数据，直接修改 props 会抛出警告。流程图如下：<br><a href="https://link.juejin.im/?target=https%3A%2F%2Fcamo.githubusercontent.com%2F37b4f4f5fe2864eacc4836fd593e62c6fd1b6c06%2F68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031372f31302f31392f3262303830386237393234663730663732316662396435636132323962356533" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/2598877-0c00bfbd113ad780?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></a><br>所以，当你想要在子组件去修改 props 时，把这个子组件当成父组件那样用，所以就有了</p><ul><li>1、定义一个局部变量，并用 prop 的值初始化它。</li><li>2、定义一个计算属性，处理 prop 的值并返回。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自：&lt;a href=&quot;https://juejin.im/entry/59e8b8a8518825579d131e51&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/entry/59e8b8a8518825579d13
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tiandashu.github.io/2018/06/04/%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E6%88%96%E6%BB%91%E5%85%A5%E5%9B%BE%E7%89%87%E5%8F%98%E5%A4%A7%E7%AA%81%E5%87%BA%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C/"/>
    <id>http://tiandashu.github.io/2018/06/04/鼠标点击或滑入图片变大突出显示效果/</id>
    <published>2018-06-04T14:58:50.201Z</published>
    <updated>2018-06-04T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>###1.代码显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;solution-list&quot;&gt;</span><br><span class="line">    &lt;ul id=&quot;solutionList&quot; class=&quot;clearfix&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item,index) in content&quot; :key=&quot;item.id&quot; :class=&quot;&#123;active:isActive==index&#125;&quot; @click=&quot;click(index)&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;solution-item-wrapper&quot;&gt;</span><br><span class="line">          &lt;p class=&quot;solution-title&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;div class=&quot;short-bar&quot;&gt;&lt;/div&gt;</span><br><span class="line">          &lt;p class=&quot;solution-intro&quot;&gt;&#123;&#123;item.intro&#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;a href=&quot;#&quot;&gt;&#123;&#123;item.link&#125;&#125;&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> export default&#123;</span><br><span class="line">   name:&apos;hover&apos;,</span><br><span class="line">   data()&#123;</span><br><span class="line">     return&#123;</span><br><span class="line">       content:[</span><br><span class="line">         &#123;</span><br><span class="line">           &quot;title&quot;:&quot;网站解决方案&quot;,</span><br><span class="line">           &quot;intro&quot;:&quot;网站解决方案为企业及开发者提供灵活弹性自动化的基础IT设施建设、按需付费的服务模式及低成本的运维服务体系，帮助客户推动企业核心业务创新发展。&quot;,</span><br><span class="line">           &quot;link&quot;:&quot;查看详情&quot;</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           &quot;title&quot;:&quot;金融云解决方案&quot;,</span><br><span class="line">           &quot;intro&quot;:&quot;金融云为客户提供量身定制的云计算服务，IT硬件零投入，云设施运维零维护，高品质保障的售后服务机制，帮助金融用户高效应用云计算服务。&quot;,</span><br><span class="line">           &quot;link&quot;:&quot;查看详情&quot;</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           &quot;title&quot;:&quot;移动云解决方案&quot;,</span><br><span class="line">           &quot;intro&quot;:&quot;移动云应用虚拟化系统为客户提供最佳的应用性能及灵活的应用虚拟化服务，帮助客户实现手机、平板电脑等移动设备安全顺畅地访问各种应用软件。&quot;,</span><br><span class="line">           &quot;link&quot;:&quot;查看详情&quot;</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           &quot;title&quot;:&quot;电商云解决方案&quot;,</span><br><span class="line">           &quot;intro&quot;:&quot;电商云帮助电商客户快速实现平台搭建、节约成本、应对业务高并发、强化安全防护能力，助力电商客户快速实现金融创新及业务增收的目标。&quot;,</span><br><span class="line">           &quot;link&quot;:&quot;查看详情&quot;</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           &quot;title&quot;:&quot;游戏云解决方案&quot;,</span><br><span class="line">           &quot;intro&quot;:&quot;游戏云为客户游戏开发、游戏运营提供专属服务集群；多场景多类型的游戏部署解决方案，同时提供尊贵VIP售后服务，为客户游戏稳定运行提供基石。&quot;,</span><br><span class="line">           &quot;link&quot;:&quot;查看详情&quot;</span><br><span class="line">         &#125;</span><br><span class="line">       ],</span><br><span class="line">       isActive:false</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">      click(index)&#123;</span><br><span class="line">        this.isActive=index;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style  scoped lang=&apos;scss&apos; rel=&quot;stylesheet/scss&quot;&gt;</span><br><span class="line">  *&#123;margin:0;padding:0;list-style-type:none;&#125;</span><br><span class="line">  a,img&#123;border:0;text-decoration:none;&#125;</span><br><span class="line"></span><br><span class="line">  .clearfix:after&#123;visibility:hidden;display:block;font-size:0;content:&quot; &quot;;clear:both;height:0&#125;</span><br><span class="line">  *html .clearfix&#123;height:1%&#125;</span><br><span class="line"></span><br><span class="line">  .solution-list&#123;position:relative;height:412px;z-index:9;width:1200px;margin:30px auto;&#125;</span><br><span class="line">  .short-bar&#123;position:absolute;top:187px;left:50%;margin-left:-15px;width:30px;height:3px;background-color:#fff&#125;</span><br><span class="line">  .active .short-bar&#123;top:201px;background-color:#009dff&#125;</span><br><span class="line">  .solution-list ul li&#123;float:left;width:240px;position:relative;height:412px;transition:all .5s;-moz-transition:all .5s;-webkit-transition:all .5s;-o-transition:all .5s&#125;</span><br><span class="line">  .solution-item-wrapper&#123;width:240px;height:412px;background:url(./img/solution_item_bg_01.jpg) center no-repeat&#125;</span><br><span class="line">  li:nth-of-type(2) .solution-item-wrapper&#123;width:240px;height:412px;background:url(./img/solution_item_bg_02.jpg) center no-repeat&#125;</span><br><span class="line">  li:nth-of-type(3) .solution-item-wrapper&#123;width:240px;height:412px;background:url(./img/solution_item_bg_03.jpg) center no-repeat&#125;</span><br><span class="line">  li:nth-of-type(4) .solution-item-wrapper&#123;width:240px;height:412px;background:url(./img/solution_item_bg_04.jpg) center no-repeat&#125;</span><br><span class="line">  li:nth-of-type(5) .solution-item-wrapper&#123;width:240px;height:412px;background:url(./img/solution_item_bg_05.jpg) center no-repeat&#125;</span><br><span class="line"></span><br><span class="line">  li.active .solution-item-wrapper&#123;position:absolute;z-index:9;top:-62px;left:-51px;width:341px;height:526px;background:url(img/solution_item_bg_active_01.jpg) no-repeat;-webkit-box-shadow:0 5px 40px rgba(0,0,0,.5);-moz-box-shadow:0 5px 40px rgba(0,0,0,.5);box-shadow:0 5px 40px rgba(0,0,0,.5)&#125;</span><br><span class="line"></span><br><span class="line">  //@media only screen and (max-width:1400px)&#123;</span><br><span class="line">    //.product-special-li-5.active .solution-item-wrapper&#123;left:-102px&#125;</span><br><span class="line"> // &#125;</span><br><span class="line"></span><br><span class="line">  li.active :nth-of-type(2) .solution-item-wrapper&#123;background-image:url(./img/solution_item_bg_active_02.jpg)&#125;</span><br><span class="line">  li.active :nth-of-type(3) .solution-item-wrapper&#123;background-image:url(./img/solution_item_bg_active_03.jpg)&#125;</span><br><span class="line">  li.active :nth-of-type(4) .solution-item-wrapper&#123;background-image:url(./img/solution_item_bg_active_04.jpg)&#125;</span><br><span class="line">  li.active :nth-of-type(5) .solution-item-wrapper&#123;background-image:url(./img/solution_item_bg_active_05.jpg)&#125;</span><br><span class="line">  .solution-list ul li p.solution-title&#123;position:absolute;top:211px;width:100%;text-align:center;color:#fff;font-size:18px;z-index:2&#125;</span><br><span class="line">  .solution-list ul li p.solution-intro&#123;position:absolute;top:282px;left:50%;margin-left:-121px;width:242px;overflow:hidden;color:#eee;line-height:2;z-index:2;opacity:0;filter:alpha(opacity=0);font-size:14px;text-align:justify&#125;</span><br><span class="line">  .solution-list ul li a&#123;display:none;position:absolute;top:452px;left:50%;margin-left:-87px;width:174px;height:40px;line-height:40px;text-align:center;font-size:14px;color:#fff;z-index:2;background-color:#0af&#125;</span><br><span class="line">  .solution-list ul li a:hover&#123;background-color:#0099e5;transition:all .6s;-moz-transition:all .6s;-webkit-transition:all .6s;-o-transition:all .6s&#125;</span><br><span class="line">  .solution-list ul li.active p.solution-title&#123;top:158px;font-size:22px&#125;</span><br><span class="line">  .solution-list ul li.active p.solution-intro&#123;top:230px;opacity:1;filter:alpha(opacity=100)&#125;</span><br><span class="line">  .solution-list ul li.active a&#123;top:388px;display:block&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>###2.问题呈现</p><p>####2.1,怎么操作dom的class<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;item in content&quot; :key=&quot;item.id&quot; :class=&quot;&#123;active:isActive&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>####2.2 this指向什么<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> methods:&#123;</span><br><span class="line">      click(index)&#123;</span><br><span class="line">        this.isActive=index;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">//这里this指向实例，并不是绑定的元素</span><br></pre></td></tr></table></figure></p><p>####2.3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//html代码</span><br><span class="line">// 涉及到操作循环的li，只改变点击的li，而不改变其他li，这时候需要用index标识下,再把index赋值给</span><br><span class="line">&lt;li v-for=&quot;(item,index) in content&quot; :key=&quot;item.id&quot; :class=&quot;&#123;active:isActive==index&#125;&quot; @click=&quot;click(index)&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">//js代码</span><br><span class="line">methods:&#123;</span><br><span class="line">      click(index)&#123;</span><br><span class="line">        this.isActive=index;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###1.代码显示&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客添加评论功能</title>
    <link href="http://tiandashu.github.io/2018/06/03/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>http://tiandashu.github.io/2018/06/03/博客添加评论功能/</id>
    <published>2018-06-03T10:28:32.000Z</published>
    <updated>2018-06-04T14:36:33.156Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-以安装来必力评论为例，大家自己根据实际情况决定。"><a href="#1-以安装来必力评论为例，大家自己根据实际情况决定。" class="headerlink" title="1.以安装来必力评论为例，大家自己根据实际情况决定。"></a>1.以安装来必力评论为例，大家自己根据实际情况决定。</h3><p><a href="http://www.laibili.com.cn/" target="_blank" rel="noopener">来必力官网</a></p><ul><li>注册来必力帐号</li><li>点击安装-选择city-获取uiduid<br><img src="/images/1.png" alt="步骤一"><br><img src="/images/2.png" alt="步骤二"><br><img src="/images/3.png" alt="步骤三"></li></ul><h3 id="2-在themes文件相下找见安装的的主题-config-yml添加如下代码"><a href="#2-在themes文件相下找见安装的的主题-config-yml添加如下代码" class="headerlink" title="2.在themes文件相下找见安装的的主题_config.yml添加如下代码"></a>2.在themes文件相下找见安装的的主题_config.yml添加如下代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 添加来比力评论</span><br><span class="line">livere:</span><br><span class="line">    on: true</span><br><span class="line">    livere_uid: MTAyMC8zNzAxMS8xMzU0Nw</span><br></pre></td></tr></table></figure><h3 id="3-在-partial目录下新建liver-ejs文件-代码如下："><a href="#3-在-partial目录下新建liver-ejs文件-代码如下：" class="headerlink" title="3.在_partial目录下新建liver.ejs文件,代码如下："></a>3.在_partial目录下新建liver.ejs文件,代码如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;livere&quot; id=&quot;comments&quot;&gt;</span><br><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;MTAyMC8zNzAxMS8xMzU0Nw==&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">       (function(d, s) &#123;</span><br><span class="line">           var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line">    </span><br><span class="line">           if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125;</span><br><span class="line">    </span><br><span class="line">           j = d.createElement(s);</span><br><span class="line">           j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;</span><br><span class="line">           j.async = true;</span><br><span class="line">    </span><br><span class="line">           e.parentNode.insertBefore(j, e);</span><br><span class="line">       &#125;)(document, &apos;script&apos;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure><h3 id="4-选择评论添加到的位置（文章下面）-代码中添加了三种评论选择自己的"><a href="#4-选择评论添加到的位置（文章下面）-代码中添加了三种评论选择自己的" class="headerlink" title="4.选择评论添加到的位置（文章下面）,代码中添加了三种评论选择自己的"></a>4.选择评论添加到的位置（文章下面）,代码中添加了三种评论选择自己的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (page.comments)&#123; %&gt;</span><br><span class="line">&lt;section id=&quot;comment&quot;&gt;</span><br><span class="line">  &lt;!-- &lt;h1 class=&quot;title&quot;&gt;&lt;%= __(&apos;comment&apos;) %&gt;&lt;/h1&gt; --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;% if(theme.disqus_shortname) &#123; %&gt;</span><br><span class="line">  &lt;div id=&quot;disqus_thread&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var disqus_config = function () &#123;</span><br><span class="line">          this.page.url = window.location.href;</span><br><span class="line">          this.page.identifier = &apos;&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;&apos;;</span><br><span class="line">          this.page.title = &apos;&lt;%= page.title %&gt;&apos;;</span><br><span class="line">      &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;% &#125; else if (theme.duoshuo_shortname) &#123; %&gt;</span><br><span class="line">    &lt;!-- 多说评论框 start --&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var duoshuoQuery = &#123;short_name:&quot;&lt;%= theme.duoshuo_shortname %&gt;&quot;&#125;;</span><br><span class="line">(function() &#123;</span><br><span class="line">var ds = document.createElement(&apos;script&apos;);</span><br><span class="line">ds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class="line">ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</span><br><span class="line">ds.charset = &apos;UTF-8&apos;;</span><br><span class="line">(document.getElementsByTagName(&apos;head&apos;)[0] </span><br><span class="line"> || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;&quot; data-title=&quot;&lt;%= page.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 多说评论框 end --&gt;</span><br><span class="line">  &lt;% &#125; else if (theme.livere.on) &#123; %&gt;</span><br><span class="line">    &lt;!-- 来比力评论框 start --&gt;</span><br><span class="line">        &lt;%- partial(&apos;livere&apos;) %&gt;</span><br><span class="line">    &lt;!-- 来比力评论框 end --&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="5-重启服务ok"><a href="#5-重启服务ok" class="headerlink" title="5.重启服务ok"></a>5.重启服务ok</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-以安装来必力评论为例，大家自己根据实际情况决定。&quot;&gt;&lt;a href=&quot;#1-以安装来必力评论为例，大家自己根据实际情况决定。&quot; class=&quot;headerlink&quot; title=&quot;1.以安装来必力评论为例，大家自己根据实际情况决定。&quot;&gt;&lt;/a&gt;1.以安装来必力
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://tiandashu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>flag</title>
    <link href="http://tiandashu.github.io/2018/05/31/flag/"/>
    <id>http://tiandashu.github.io/2018/05/31/flag/</id>
    <published>2018-05-31T11:47:50.000Z</published>
    <updated>2018-06-04T14:06:51.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="还有理想吗"><a href="#还有理想吗" class="headerlink" title="还有理想吗"></a>还有理想吗</h3><p>理想是什么？<br>有人说把小时候吹过的牛都实现了那就是理想；也有人说理想仅仅是都美好生活憧憬。</p><p>每天坚持一点点很小的事情，每天都变得比昨天优秀。在经历挫折和磨难后仍然愿意相信自己，把曾经以为很遥远的事情做的优秀。<br>1.每天坚持看一篇技术文章<br>2.每天保持高效<br>3.每天坚持锻炼</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;还有理想吗&quot;&gt;&lt;a href=&quot;#还有理想吗&quot; class=&quot;headerlink&quot; title=&quot;还有理想吗&quot;&gt;&lt;/a&gt;还有理想吗&lt;/h3&gt;&lt;p&gt;理想是什么？&lt;br&gt;有人说把小时候吹过的牛都实现了那就是理想；也有人说理想仅仅是都美好生活憧憬。&lt;/p&gt;
&lt;p&gt;每天
      
    
    </summary>
    
    
      <category term="self" scheme="http://tiandashu.github.io/tags/self/"/>
    
  </entry>
  
  <entry>
    <title>hexo的搭建</title>
    <link href="http://tiandashu.github.io/2018/05/30/hexo%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://tiandashu.github.io/2018/05/30/hexo的搭建/</id>
    <published>2018-05-30T14:16:53.000Z</published>
    <updated>2018-06-04T15:04:55.867Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装node环境并配置"><a href="#1-安装node环境并配置" class="headerlink" title="1.安装node环境并配置"></a>1.安装node环境并配置</h3><p>More info: <a href="https://jingyan.baidu.com/article/c85b7a64b6498c003aac956a.html" target="_blank" rel="noopener">node</a></p><h3 id="2-安装git环境并配置"><a href="#2-安装git环境并配置" class="headerlink" title="2.安装git环境并配置"></a>2.安装git环境并配置</h3><p>More info: <a href="https://jingyan.baidu.com/article/9f7e7ec0b17cac6f2815548d.html" target="_blank" rel="noopener">git</a></p><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>More info: <a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">Hexo</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="4-Hexo和git关联"><a href="#4-Hexo和git关联" class="headerlink" title="4.Hexo和git关联"></a>4.Hexo和git关联</h3><p>4.1 github新建仓库 github用户名.github.io (因为要使用github的page服务，所以仓库名必须是这个格式)<br>4.2 在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。<br>4.3 将ssh添加到github，输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了<br>4.4 配置Deployment，在hexo项目中，找到_config.yml文件，修改repo值（在末尾）可以配置多个，一定要注意空格格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository: git@github.com:tiandashu/tiandashu.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>4.5 在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save<br>4.6 使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了<br>4.7 部署成功后访问你的地址：<a href="http://github用户名.github.io。那么将看到生成的文章" target="_blank" rel="noopener">http://github用户名.github.io。那么将看到生成的文章</a></p><h3 id="5-指定域名"><a href="#5-指定域名" class="headerlink" title="5.指定域名"></a>5.指定域名</h3><p>5.1 在hexo项目的source文件夹下面新建 CNAME文件<br>5.2 在CNAME里写上域名 tianaitian.com<br>5.3 获取<a href="https://github用户名.github.io" target="_blank" rel="noopener">https://github用户名.github.io</a> 的ip地址：ping github用户名.github.io<br>5.4 使用域名解析，本人使用阿里的服务</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-安装node环境并配置&quot;&gt;&lt;a href=&quot;#1-安装node环境并配置&quot; class=&quot;headerlink&quot; title=&quot;1.安装node环境并配置&quot;&gt;&lt;/a&gt;1.安装node环境并配置&lt;/h3&gt;&lt;p&gt;More info: &lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="hexo" scheme="http://tiandashu.github.io/categories/hexo/"/>
    
    
      <category term="hexo1" scheme="http://tiandashu.github.io/tags/hexo1/"/>
    
  </entry>
  
</feed>
