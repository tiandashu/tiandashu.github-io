<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>田大叔的博客</title>
  
  <subtitle>个人简历</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tiandashu.github.io/"/>
  <updated>2018-06-28T14:25:27.134Z</updated>
  <id>http://tiandashu.github.io/</id>
  
  <author>
    <name>田大叔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>bat命令</title>
    <link href="http://tiandashu.github.io/2018/06/28/bat%E5%91%BD%E4%BB%A4/"/>
    <id>http://tiandashu.github.io/2018/06/28/bat命令/</id>
    <published>2018-06-28T14:25:28.000Z</published>
    <updated>2018-06-28T14:25:27.134Z</updated>
    
    <content type="html"><![CDATA[<h3 id="run-bat—打开百度"><a href="#run-bat—打开百度" class="headerlink" title="run.bat—打开百度"></a>run.bat—打开百度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  path=%path%; C:\Program Files (x86)\Internet Explorer\iexplore.exe</span><br><span class="line">start iexplore http://www.baidu.com</span><br></pre></td></tr></table></figure><h3 id="将c盘下所有文件名输出到a-txt中，如果没有a文件，则在bat同一目录下创建一个"><a href="#将c盘下所有文件名输出到a-txt中，如果没有a文件，则在bat同一目录下创建一个" class="headerlink" title="将c盘下所有文件名输出到a.txt中，如果没有a文件，则在bat同一目录下创建一个"></a>将c盘下所有文件名输出到a.txt中，如果没有a文件，则在bat同一目录下创建一个</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  dir c:\*.* &gt;a.txt</span><br></pre></td></tr></table></figure><h3 id="执行另一个批处理文件"><a href="#执行另一个批处理文件" class="headerlink" title="执行另一个批处理文件"></a>执行另一个批处理文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call c:\code\run.bat</span><br></pre></td></tr></table></figure><h3 id="echo回显"><a href="#echo回显" class="headerlink" title="echo回显"></a>echo回显</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@echo off      表示在此语句后所有运行的命令都不显示命令行本身 </span><br><span class="line">cd code          进入code文件夹</span><br><span class="line">echo enter code directory     显示enter code directory</span><br><span class="line">call run.bat</span><br></pre></td></tr></table></figure><h3 id="增加入参"><a href="#增加入参" class="headerlink" title="增加入参"></a>增加入参</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//run.bat</span><br><span class="line">@echo off</span><br><span class="line"> type %1 </span><br><span class="line"> type %2 </span><br><span class="line"></span><br><span class="line">//在cmd中执行 run.bat a.text b.text</span><br></pre></td></tr></table></figure><h3 id="for循环的使用"><a href="#for循环的使用" class="headerlink" title="for循环的使用"></a>for循环的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">for %%t in (*.bat *.txt) do type %%t</span><br><span class="line"></span><br><span class="line">//注意1，打印的是bat和txt文件的内容</span><br><span class="line">//注意2，此bat放在需打印文件内容的文件一个目录层级下</span><br></pre></td></tr></table></figure><h3 id="if-else判断语句的使用"><a href="#if-else判断语句的使用" class="headerlink" title="if/else判断语句的使用"></a>if/else判断语句的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">if &#123;%1&#125;==&#123;%2&#125; (</span><br><span class="line">echo eq l.</span><br><span class="line">) else (</span><br><span class="line">echo not eq l.</span><br><span class="line">)</span><br><span class="line">//cmd输入run.bat 1 2</span><br></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">del a.txt</span><br></pre></td></tr></table></figure><h3 id="GOTO语句"><a href="#GOTO语句" class="headerlink" title="GOTO语句"></a>GOTO语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">GOTO SECOND</span><br><span class="line">:FIRST</span><br><span class="line">echo I AM FIRST</span><br><span class="line">:SECOND</span><br><span class="line">echo I AM SECOND</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set a=aa1bb1aa2bb2</span><br><span class="line">echo %a%</span><br><span class="line"></span><br><span class="line">set b=12</span><br><span class="line">echo %b%</span><br><span class="line"></span><br><span class="line">set /a c=39/10           </span><br><span class="line">echo %c%</span><br></pre></td></tr></table></figure><h3 id="从FTP下载文件"><a href="#从FTP下载文件" class="headerlink" title="从FTP下载文件"></a>从FTP下载文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@echo open 10.86.56.6 &gt;ftp.txt      rem ftp server ip</span><br><span class="line">@echo user mos&gt;&gt;ftp.txt             rem 用户名</span><br><span class="line">@echo mos&gt;&gt;ftp.txt                  rem 密码</span><br><span class="line">@echo cd test&gt;&gt;ftp.txt              rem 文件路径</span><br><span class="line">@echo get mw-license-switch-conffile.xml&gt;&gt;ftp.txt rem 文件名</span><br><span class="line">@echo bye&gt;&gt;ftp.txt</span><br><span class="line">ftp -i -n -s:ftp.txt                rem 文件存放在脚本所在路径下</span><br></pre></td></tr></table></figure><h3 id="切换盘符"><a href="#切换盘符" class="headerlink" title="切换盘符"></a>切换盘符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set current_dir=C:\Program Files\HaoZip    </span><br><span class="line">pushd %current_dir% </span><br><span class="line">echo %cd%</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;run-bat—打开百度&quot;&gt;&lt;a href=&quot;#run-bat—打开百度&quot; class=&quot;headerlink&quot; title=&quot;run.bat—打开百度&quot;&gt;&lt;/a&gt;run.bat—打开百度&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网站搭建步骤</title>
    <link href="http://tiandashu.github.io/2018/06/28/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/"/>
    <id>http://tiandashu.github.io/2018/06/28/网站搭建步骤/</id>
    <published>2018-06-28T13:37:28.000Z</published>
    <updated>2018-06-28T13:46:21.330Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为一个随便加技能点的前端，对网站的搭建操作留档以供后续参考！</p></blockquote><p>域名、云服务器的购买省略</p><p>1、云服务器的端口配置<br>有些时候发现项目部署到服务器上无法访问，可能是监听的端口未开启。参照阿里云服务的安全组策略开通端口即可。</p><p>2、网站的备案<br><img src="/images/ali01.png" alt="未备案"><br>先实名认证，然后进行备案</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作为一个随便加技能点的前端，对网站的搭建操作留档以供后续参考！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;域名、云服务器的购买省略&lt;/p&gt;
&lt;p&gt;1、云服务器的端口配置&lt;br&gt;有些时候发现项目部署到服务器上无法访问，可能是监听的端口未开启。参照阿里
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>word-break、word-wrap和white-space的区别</title>
    <link href="http://tiandashu.github.io/2018/06/14/word-break%E3%80%81word-wrap%E5%92%8Cwhite-space%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://tiandashu.github.io/2018/06/14/word-break、word-wrap和white-space的区别/</id>
    <published>2018-06-14T14:04:20.000Z</published>
    <updated>2018-06-14T14:22:15.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><p>1、word-break<br>值：normal | break-all | keep-all | break-word</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">normal：  </span><br><span class="line">使用默认的断行规则。  </span><br><span class="line">break-all：  </span><br><span class="line">对于non-CJK (CJK 指中文/日文/韩文) 文本，可在任意字符间断行。  </span><br><span class="line">keep-all：  </span><br><span class="line">CJK 文本不断行。 Non-CJK 文本表现同 normal。  </span><br><span class="line">兼容性如下图所示：keep-all的兼容性比较差一些，其他基本上主流的浏览器都能支持。</span><br></pre></td></tr></table></figure><p><img src="/images/css1.jpg" alt=""></p><p>2、word-wrap<br>注：word-wrap 属性原本属于微软的一个私有属性，在 CSS3 现在的文本规范草案中已经被重名为 overflow-wrap 。 word-wrap 现在被当作 overflow-wrap 的 “别名”。 稳定的谷歌 Chrome 和 Opera 浏览器版本支持这种新语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word-wrap语法如下：</span><br><span class="line">值：normal | break-word  </span><br><span class="line">normal：  </span><br><span class="line">表示在正常的单词结束处换行。  </span><br><span class="line">break-word：  </span><br><span class="line">表示如果行内没有多余的地方容纳该单词到结尾，则那些正常的不能被被分割的单词会被强制分割换行。</span><br></pre></td></tr></table></figure><p>3、white-space<br>值：normal | pre | nowrap | pre-wrap | pre-line</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">normal：  </span><br><span class="line">连续的空白符会被合并，换行符会被当作空白符来处理。填充line盒子时，必要的话会换行。  </span><br><span class="line">nowrap：  </span><br><span class="line">和 normal 一样，连续的空白符会被合并。但换行符无效。  </span><br><span class="line">pre：  </span><br><span class="line">所有空白符都会被保留。不会自动换行，原样输出。   </span><br><span class="line">pre-wrap：  </span><br><span class="line">保留空白符序列，但是正常地进行换行。  </span><br><span class="line">pre-line：  </span><br><span class="line">合并空白符序列，但是保留换行符。  </span><br><span class="line">上面的换行符是指回车\r、\n、或\r\n。对于&lt;br/&gt;标签，不管是上面哪个属性都会换行的。</span><br><span class="line">如果同时有多个空格、制表符、换行符，最终合并结果是只有一个空格。</span><br></pre></td></tr></table></figure><p>pre和pre-wrap的区别在于pre-wrap能够自动换行；pre-wrap和pre-line的区别在于pre-line能够合并空格。<br>(帮助记忆：wrap在排版中一般指换行)</p><p>规则        空格和制表符    换行符        自动换行<br>normal        合并        合并        换行<br>nowrap        合并        合并       不换行<br>pre    保留    保留        不换行<br>pre-wrap    保留        保留        换行<br>pre-line    合并        保留        换行</p><p>二、word-break:break-all和word-wrap:nowrap区别</p><p>前者是暴力强制换行，不管行末的单词是否显示完整，只要是非中日韩字符，就强制换行；<br>后者是温柔处理，如果行末没有足够空间可以放下单词，整个单词放到下一行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;   </span><br><span class="line">p &#123;  </span><br><span class="line">    width: 200px;  </span><br><span class="line">    padding: 5px;  </span><br><span class="line">    background-color: #f0f3f9;  </span><br><span class="line">    font-size: 14px;  </span><br><span class="line">&#125;  </span><br><span class="line">.word-break &#123;  </span><br><span class="line">    word-break: break-all;  </span><br><span class="line">&#125;  </span><br><span class="line">.word-wrap &#123;  </span><br><span class="line">&lt;span style=&quot;white-space:pre;&quot;&gt; &lt;/span&gt;white-space: break-word;  </span><br><span class="line">&#125;  </span><br><span class="line">&lt;/style&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;p class=&quot;word-break&quot;&gt;这个段落设置了word-break:break-all。&lt;/p&gt;  </span><br><span class="line">&lt;p class=&quot;word-wrap&quot;&gt;这个段落设置了white-space:break-word。&lt;/p&gt;  </span><br><span class="line">效果如下图所示：</span><br></pre></td></tr></table></figure><p>三、word-break:keep-all和white-space:nowrap<br>这两个差别比较大，作用完全不一样。<br>word-break:keep-all会自动换行，但自动换行不会在词间换行，包括非日韩文以及日韩文。对于非日韩文来说，效果和word-break:normal是一样的。<br>white-space:nowrap效果是不会自动换行，除非手动添加换行标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;   </span><br><span class="line">p &#123;  </span><br><span class="line">    width: 200px;  </span><br><span class="line">    padding: 5px;  </span><br><span class="line">    background-color: #f0f3f9;  </span><br><span class="line">    font-size: 14px;  </span><br><span class="line">&#125;  </span><br><span class="line">.word-break &#123;  </span><br><span class="line">    word-break: normal;  </span><br><span class="line">&#125;  </span><br><span class="line">.word-keep &#123;  </span><br><span class="line">    word-break: keep-all;  </span><br><span class="line">&#125;  </span><br><span class="line">.nowrap &#123;  </span><br><span class="line">    white-space: nowrap;  </span><br><span class="line">&#125;  </span><br><span class="line">&lt;/style&gt;  </span><br><span class="line">&lt;p class=&quot;word-break&quot;&gt;这个段落设置了word-break:normal。非中日韩文词间不会断行但日韩文词间换行。&lt;/p&gt;  </span><br><span class="line">&lt;p class=&quot;word-keep&quot;&gt;这个段落设置了word-break:keep-all。非中日韩文以及中日韩文的词间都不换行。&lt;/p&gt;  </span><br><span class="line">&lt;p class=&quot;nowrap&quot;&gt;这个段落设置了white-space:nowrap。不管文字有多长都不会换行，除非添加换行标签&lt;br/&gt;。&lt;br/&gt;前面有个换行标签&lt;/p&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、基本介绍&quot;&gt;&lt;a href=&quot;#一、基本介绍&quot; class=&quot;headerlink&quot; title=&quot;一、基本介绍&quot;&gt;&lt;/a&gt;一、基本介绍&lt;/h3&gt;&lt;p&gt;1、word-break&lt;br&gt;值：normal | break-all | keep-all | brea
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue项目引入远程js</title>
    <link href="http://tiandashu.github.io/2018/06/11/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E8%BF%9C%E7%A8%8Bjs/"/>
    <id>http://tiandashu.github.io/2018/06/11/Vue项目引入远程js/</id>
    <published>2018-06-11T12:35:54.000Z</published>
    <updated>2018-06-14T14:12:27.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-直接在dom上操作"><a href="#1-直接在dom上操作" class="headerlink" title="1.直接在dom上操作"></a>1.直接在dom上操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line"> mounted() &#123;</span><br><span class="line">  const s = document.createElement(&apos;script&apos;);</span><br><span class="line">  s.type = &apos;text/javascript&apos;;</span><br><span class="line">  s.src = &apos;https://g.alicdn.com/dingding/dinglogin/0.0.2/ddLogin.js&apos;;</span><br><span class="line">  document.body.appendChild(s);</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-封装一个组件-remote-js"><a href="#2-封装一个组件-remote-js" class="headerlink" title="2.封装一个组件 remote-js"></a>2.封装一个组件 remote-js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//remote-js</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        &apos;remote-js&apos;: &#123;</span><br><span class="line">            render(createElement) &#123;</span><br><span class="line">                return createElement(&apos;script&apos;, &#123; attrs: &#123; type: &apos;text/javascript&apos;, src: this.src &#125;&#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            props: &#123;</span><br><span class="line">                src: &#123; type: String, required: true &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//在别的组件中使用</span><br><span class="line">import remoteJs from &apos;path/to/remote-js&apos;;</span><br><span class="line">export default &#123;</span><br><span class="line">    mixins:[remoteJs]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;remote-js src=&quot;https://g.alicdn.com/dingding/dinglogin/0.0.2/ddLogin.js&quot;&gt;&lt;/remote-js&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-直接在dom上操作&quot;&gt;&lt;a href=&quot;#1-直接在dom上操作&quot; class=&quot;headerlink&quot; title=&quot;1.直接在dom上操作&quot;&gt;&lt;/a&gt;1.直接在dom上操作&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://tiandashu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>koa2入门资源</title>
    <link href="http://tiandashu.github.io/2018/06/10/koa2%E5%85%A5%E9%97%A8%E8%B5%84%E6%BA%90/"/>
    <id>http://tiandashu.github.io/2018/06/10/koa2入门资源/</id>
    <published>2018-06-10T15:48:25.000Z</published>
    <updated>2018-06-10T15:56:14.283Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是将学习koa2开发中查阅的好的资料留存一下，方便学习。</p><p>(阮一峰-koa)[<a href="http://www.ruanyifeng.com/blog/2017/08/koa.html]" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/08/koa.html]</a><br>(廖雪峰-koa)[<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501579966ab03decb0dd246e1a6799dd653a15e1b000]" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501579966ab03decb0dd246e1a6799dd653a15e1b000]</a><br>(使用Koa2搭建web项目)[<a href="https://blog.csdn.net/ererfei/article/details/68060551]" target="_blank" rel="noopener">https://blog.csdn.net/ererfei/article/details/68060551]</a><br>(koa官网)[<a href="https://koa.bootcss.com/]" target="_blank" rel="noopener">https://koa.bootcss.com/]</a><br>(koa服务器搭建基础)[<a href="https://www.jianshu.com/p/613bbb245841]" target="_blank" rel="noopener">https://www.jianshu.com/p/613bbb245841]</a><br>(HTTP协议简介)[<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432011939547478fd5482deb47b08716557cc99764e0000]" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432011939547478fd5482deb47b08716557cc99764e0000]</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要是将学习koa2开发中查阅的好的资料留存一下，方便学习。&lt;/p&gt;
&lt;p&gt;(阮一峰-koa)[&lt;a href=&quot;http://www.ruanyifeng.com/blog/2017/08/koa.html]&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue项目本地资源路径问题</title>
    <link href="http://tiandashu.github.io/2018/06/10/Vue%E9%A1%B9%E7%9B%AE%E6%9C%AC%E5%9C%B0%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <id>http://tiandashu.github.io/2018/06/10/Vue项目本地资源路径问题/</id>
    <published>2018-06-10T14:21:50.000Z</published>
    <updated>2018-06-10T15:05:27.873Z</updated>
    
    <content type="html"><![CDATA[<p>使用vue-cli进行开发了一段时间，但是难免还是遇到一些问题，这其中也包括了对webpack的不求甚解(下个目标搞定webpack)。此文章先对遇到的Vue项目本地资源路径问题做一个简单的记录。</p><h3 id="1-直接引入图片"><a href="#1-直接引入图片" class="headerlink" title="1.直接引入图片"></a>1.直接引入图片</h3><p>无论图片是放在static文件夹、assets文件夹或者是自己在src下新建的文件夹，图片路径和背景图路径均使用相对路径。<br>另外简单说下static和assets的区别：两者都是存放项目的静态文件资源js/css/img…。static文件加下的资源项目打包的时候不会被webpack处理只是简单的拷贝，所以一般将第三方的资源放在这里比如swiper,加快打包的速度。assets文件下的资源会被webpack进行处理比如压缩混淆添加hash等，所以一般将项目本身的资源放在该文件下。</p><h3 id="2-动态绑定一组本地图片"><a href="#2-动态绑定一组本地图片" class="headerlink" title="2.动态绑定一组本地图片"></a>2.动态绑定一组本地图片</h3><p>将图片当成模块先引进来，再绑定<br><img src="/images/vue1.png" alt=""><br><img src="/images/vue2.png" alt=""><br>虽然这种方式可以实现，但是写起来麻烦，比较懒。</p><h3 id="3-给资源路径设置alias"><a href="#3-给资源路径设置alias" class="headerlink" title="3.给资源路径设置alias"></a>3.给资源路径设置alias</h3><p>在引入资源时使用，别名alias，vue init webpack生成的项目在build/webpack.base.conf.js文件中进行更改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;,</span><br><span class="line">      &apos;@&apos;: resolve(&apos;src&apos;),</span><br><span class="line">      &apos;@a&apos;: resolve(&apos;src/assets&apos;),</span><br><span class="line">      &apos;@c&apos;: resolve(&apos;src/components&apos;),</span><br><span class="line">      &apos;@p&apos;: resolve(&apos;src/page&apos;),</span><br><span class="line">      &apos;@s&apos;: resolve(&apos;src/service&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">之后项目中就可以使用了 </span><br><span class="line">&lt;img src=&quot;~@a/images/[图片名]&quot;&gt; // images: src/assets 下存放图片的文件夹 </span><br><span class="line">backgroud: url(~@a/images/[图片名]) </span><br><span class="line">js中 直接用 @a/...，不需要加 ~</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用vue-cli进行开发了一段时间，但是难免还是遇到一些问题，这其中也包括了对webpack的不求甚解(下个目标搞定webpack)。此文章先对遇到的Vue项目本地资源路径问题做一个简单的记录。&lt;/p&gt;
&lt;h3 id=&quot;1-直接引入图片&quot;&gt;&lt;a href=&quot;#1-直接引入
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue项目中使用第三方库</title>
    <link href="http://tiandashu.github.io/2018/06/10/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    <id>http://tiandashu.github.io/2018/06/10/Vue项目中使用第三方库/</id>
    <published>2018-06-10T14:21:50.000Z</published>
    <updated>2018-06-10T15:37:19.853Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要总结了一下在vue-cli中使用第三方库的方式。</p><h3 id="1-全局变量"><a href="#1-全局变量" class="headerlink" title="1.全局变量"></a>1.全局变量</h3><p>将引入的第三方库作为全局变量挂载在window对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//main.js</span><br><span class="line">window._ = require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">//组件中使用</span><br><span class="line">export default &#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(_.isEmpty() ? &apos;Lodash everywhere!&apos; : &apos;Uh oh..&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方式不适合于服务端渲染, 因为服务端没有 window 对象, 是 undefined, 当试图去访问属性时会报错.</p><h3 id="2-在组件文件中引入"><a href="#2-在组件文件中引入" class="headerlink" title="2.在组件文件中引入"></a>2.在组件文件中引入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//组件中引入</span><br><span class="line">import _ = require(&apos;lodash&apos;);</span><br><span class="line">export default &#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(_.isEmpty() ? &apos;Lodash everywhere!&apos; : &apos;Uh oh..&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式是允许的, 但是比较繁琐, 并且带来的问题是: 你必须记住在哪些文件引用了该库, 如果项目不再依赖这个库时, 得去找到每一个引用该库的文件并删除该库的引用. 如果构建工具没设置正确, 可能导致该库的多份拷贝被引用.</p><h3 id="3-优雅的方式-代理到Vue的原型对象上去"><a href="#3-优雅的方式-代理到Vue的原型对象上去" class="headerlink" title="3.优雅的方式 - 代理到Vue的原型对象上去"></a>3.优雅的方式 - 代理到Vue的原型对象上去</h3><p>代理到vue原型上有2种方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//方式一</span><br><span class="line">//main.js</span><br><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line">Vue.prototype.$http = axios;</span><br><span class="line"></span><br><span class="line">//方式二</span><br><span class="line">//main.js</span><br><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line">Object.defineProperty(Vue.prototype, &apos;$http&apos;, &#123; value: axios &#125;);</span><br><span class="line"></span><br><span class="line">这两种写法的效果是一致的，但是 Object.defineProperty 允许我们通过一个 descriptor 来定义属性. Descriptor 运行我们去设</span><br><span class="line">置对象属性的一些底层(low-level)细节, 如是否允许属性可写? 是否允许属性在 for 循环中被遍历.</span><br><span class="line">通常, 我们不会为此感到困扰, 因为大部分时候, 对于属性赋值, 我们不需要考虑这样的细节. 但这有一个明显的优点: 通过 descriptor</span><br><span class="line">创建的属性默认是只读的.</span><br><span class="line"></span><br><span class="line">这就意味着, 一些处于迷糊状态的(coffee-deprived)开发者不能在组件内去做一些很愚蠢的事情, 就像这样:</span><br><span class="line">this.$http = &apos;Assign some random thing to the instance method&apos;;</span><br><span class="line">this.$http.get(&apos;/&apos;); // TypeError: this.$http.get is not a function</span><br><span class="line">此外, 试图给只读实例的方法重新赋值会得到 TypeError: Cannot assign to read only property 的错误.</span><br></pre></td></tr></table></figure></p><p>由于所有的组件都会从 Vue 的原型对象上继承它们的方法, 因此在所有组件/实例中都可以通过 this.$http: 的方式访问 axios 而不需要定义全局变量或者手动的引入.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//组件中使用</span><br><span class="line">export default &#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.$http.get(&apos;/&apos;).then(data =&gt; &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;).catch(err =&gt; &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>$<br>你可能会注意到, 代理第三库的属性会有一个 $ 前缀, 也可能看到其它类似 $refs, $on, $mount 的属性和方式, 它们也有这个前缀.<br>这个不是强制要求, 给属性添加 $ 前缀是提供那些处于迷糊状态(coffee-deprived)的开发者这是一个公开的 API, 和 Vuejs 的一些内部属性和方法区分开来.</p><h3 id="4-插件的形式"><a href="#4-插件的形式" class="headerlink" title="4.插件的形式"></a>4.插件的形式</h3><p>插件的使用形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Vuex from &apos;vuex&apos;;</span><br><span class="line">Vue.use(Vuex);</span><br></pre></td></tr></table></figure></p><p>将一个普通插件改造成vue插件，或者你可以写一个自己的插件给别人使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//axios.js</span><br><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line"> </span><br><span class="line">export default &#123;</span><br><span class="line">  install: function(Vue) &#123;</span><br><span class="line">    Object.defineProperty(Vue.prototype, &apos;$http&apos;, &#123; value: axios &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后, 利用 Vue 的实例方法 use 将插件添加到项目中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//main.js</span><br><span class="line">import AxiosPlugin from &apos;./axios.js&apos;;</span><br><span class="line">Vue.use(AxiosPlugin);</span><br><span class="line"> </span><br><span class="line">new Vue(&#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(this.$http ? &apos;Axios works!&apos; : &apos;Uh oh..&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>插件的可选参数<br>插件的 install 方法可以接受可选参数. 一些开发可能不喜欢将 Axios 实例命名为 $http, 因为这是 Vue Resource 提供的一个通用名字. 因而可以提供一个可选的参数允许他们随意命名:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//axios.js</span><br><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line"> </span><br><span class="line">export default &#123;</span><br><span class="line">  install: function(Vue, name = &apos;$http&apos;) &#123;</span><br><span class="line">    Object.defineProperty(Vue.prototype, name, &#123; value: axios &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//main.js</span><br><span class="line">import AxiosPlugin from &apos;./axios.js&apos;;</span><br><span class="line">Vue.use(AxiosPlugin, &apos;$axios&apos;);</span><br><span class="line"> </span><br><span class="line">new Vue(&#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(this.$axios ? &apos;Axios works!&apos; : &apos;Uh oh..&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="http://www.jqhtml.com/9582.html" target="_blank" rel="noopener">参考资料：http://www.jqhtml.com/9582.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要总结了一下在vue-cli中使用第三方库的方式。&lt;/p&gt;
&lt;h3 id=&quot;1-全局变量&quot;&gt;&lt;a href=&quot;#1-全局变量&quot; class=&quot;headerlink&quot; title=&quot;1.全局变量&quot;&gt;&lt;/a&gt;1.全局变量&lt;/h3&gt;&lt;p&gt;将引入的第三方库作为全局变量挂载在w
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue项目中使用cdn引入js</title>
    <link href="http://tiandashu.github.io/2018/06/10/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8cdn%E5%BC%95%E5%85%A5js/"/>
    <id>http://tiandashu.github.io/2018/06/10/Vue项目中使用cdn引入js/</id>
    <published>2018-06-10T14:21:50.000Z</published>
    <updated>2018-06-10T15:41:50.023Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue项目SSR改造实战</title>
    <link href="http://tiandashu.github.io/2018/06/07/Vue%E9%A1%B9%E7%9B%AESSR%E6%94%B9%E9%80%A0%E5%AE%9E%E6%88%98/"/>
    <id>http://tiandashu.github.io/2018/06/07/Vue项目SSR改造实战/</id>
    <published>2018-06-07T10:28:32.000Z</published>
    <updated>2018-06-07T14:54:03.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要做SSR"><a href="#为什么要做SSR" class="headerlink" title="为什么要做SSR"></a>为什么要做SSR</h3><p>为了更好的seo抓取，当然，还有另一个原因是SSR概念现在在前端非常火。下面将详细介绍本博客项目SSR全过程。</p><h3 id="SSR改造实战"><a href="#SSR改造实战" class="headerlink" title="SSR改造实战"></a>SSR改造实战</h3><p>总的来说SSR改造还是相当容易的。推荐在动手之前，先了解<a href="https://ssr.vuejs.org/zh/guide/non-node.html" target="_blank" rel="noopener">Vue SSR指南官方文档</a>和官方<a href="https://github.com/vuejs/vue-hackernews-2.0/" target="_blank" rel="noopener">Vue SSR Demo</a>，这会让我们事半功倍。</p><h3 id="1-构建改造"><a href="#1-构建改造" class="headerlink" title="1. 构建改造"></a>1. 构建改造</h3><p><img src="/images/ssr1.png" alt=""><br>上图是Vue官方的SSR原理介绍图片。从这张图片，我们可以知道：我们需要通过Webpack打包生成两份bundle文件：<br>Client Bundle，给浏览器用。和纯Vue前端项目Bundle类似<br>Server Bundle，供服务端SSR使用，一个json文件<br>不管你项目先前是什么样子，是否是使用vue-cli生成的。都会有这个构建改造过程。在构建改造这里会用到 vue-server-renderer 库，这里要注意的是 vue-server-renderer 版本要与Vue版本一样。下图是我的构建文件目录：<br><img src="/images/ssr2.png" alt=""></p><p>util.js 提供一些公共方法<br>webpack.base.js是公共的配置<br>webpack.client.js 是生成Client Bundle的配置。核心配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const VueSSRClientPlugin = require(&apos;vue-server-renderer/client-plugin&apos;)</span><br><span class="line">const config = merge(baseConfig, &#123;</span><br><span class="line">  target: &apos;web&apos;,</span><br><span class="line">  entry: &apos;./src/entry.client.js&apos;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.DefinePlugin(&#123;</span><br><span class="line">      &apos;process.env.NODE_ENV&apos;: JSON.stringify(process.env.NODE_ENV || &apos;development&apos;),</span><br><span class="line">      &apos;process.env.VUE_ENV&apos;: &apos;&quot;client&quot;&apos;</span><br><span class="line">    &#125;),</span><br><span class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: &apos;vender&apos;,</span><br><span class="line">      minChunks: 2</span><br><span class="line">    &#125;),</span><br><span class="line">    // extract webpack runtime &amp; manifest to avoid vendor chunk hash changing</span><br><span class="line">    // on every build.</span><br><span class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: &apos;manifest&apos;</span><br><span class="line">    &#125;),</span><br><span class="line">    new VueSSRClientPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>webpack.server.js 是生成Server Bundle的配置，核心配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const VueSSRServerPlugin = require(&apos;vue-server-renderer/server-plugin&apos;)</span><br><span class="line">const config = merge(baseConfig, &#123;</span><br><span class="line">  target: &apos;node&apos;,</span><br><span class="line">  devtool: &apos;#source-map&apos;,</span><br><span class="line">  entry: &apos;./src/entry.server.js&apos;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    libraryTarget: &apos;commonjs2&apos;,</span><br><span class="line">    filename: &apos;server-bundle.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  externals: nodeExternals(&#123;</span><br><span class="line">    // do not externalize CSS files in case we need to import it from a dep</span><br><span class="line">    whitelist: /\.css$/</span><br><span class="line">  &#125;),</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.DefinePlugin(&#123;</span><br><span class="line">      &apos;process.env.NODE_ENV&apos;: JSON.stringify(process.env.NODE_ENV || &apos;development&apos;),</span><br><span class="line">      &apos;process.env.VUE_ENV&apos;: &apos;&quot;server&quot;&apos;</span><br><span class="line">    &#125;),</span><br><span class="line">    new VueSSRServerPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="2-代码改造"><a href="#2-代码改造" class="headerlink" title="2. 代码改造"></a>2. 代码改造</h3><p>2.1 必须使用VueRouter, Vuex。ajax库建议使用axios<br>可能你的项目没有使用VueRouter或Vuex。但遗憾的是，Vue-SSR必须基于 Vue + VueRouter + Vuex。Vuex官方没有提，但其实文档和Demo都是基于Vuex。我的博客以前也没有用Vuex，但经过一翻折腾后，还是乖乖加上了Vuex。另外，因为代码要能同时在浏览器和Node.js环境中运行，所以ajax库建议使用axios这样的跨平台库。</p><p>2.2 两个打包入口（entry），重构app, store, router, 为每个对象增加工厂方法createXXX</p><p>每个用户通过浏览器访问Vue页面时，都是一个全新的上下文，但在服务端，应用启动后就一直运行着，处理每个用户请求的都是在同一个应用上下文中。为了不串数据，需要为每次SSR请求，创建全新的app, store, router。</p><p><img src="/images/ssr3.png" alt=""><br>上图是我的项目文件目录。</p><p>app.js， 通用的启动Vue应用代码<br>App.vue，Vue应用根组件<br>entry.client.js，浏览器环境入口<br>entry.server.js，服务器环境入口<br>index.html，html模板<br>再看一下具体实现的核心代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// app.js</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App.vue&apos; // 根组件</span><br><span class="line">import &#123;createRouter&#125; from &apos;./routers/index&apos; </span><br><span class="line">import &#123;createStore&#125; from &apos;./vuex/store&apos;</span><br><span class="line">import &#123;sync&#125; from &apos;vuex-router-sync&apos; // 把当VueRouter状态同步到Vuex中</span><br><span class="line"></span><br><span class="line">// createApp工厂方法</span><br><span class="line">export function createApp (ssrContext) &#123;</span><br><span class="line">  let router = createRouter() // 创建全新router实例</span><br><span class="line">  let store = createStore() // 创建全新store实例</span><br><span class="line"></span><br><span class="line">  // 同步路由状态到store中</span><br><span class="line">  sync(store, router)</span><br><span class="line">  </span><br><span class="line">  // 创建Vue应用</span><br><span class="line">  const app = new Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    ssrContext,</span><br><span class="line">    render: h =&gt; h(App)</span><br><span class="line">  &#125;)</span><br><span class="line">  return &#123;app, router, store&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// entry.client.js </span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import &#123; createApp &#125; from &apos;./app&apos;</span><br><span class="line">const &#123; app, router, store &#125; = createApp()</span><br><span class="line"></span><br><span class="line">// 如果有__INITIAL_STATE__变量，则将store的状态用它替换</span><br><span class="line">if (window.__INITIAL_STATE__) &#123;</span><br><span class="line">  store.replaceState(window.__INITIAL_STATE__)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.onReady(() =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">  // 通过路由勾子，执行拉取数据逻辑</span><br><span class="line">  router.beforeResolve((to, from, next) =&gt; &#123;</span><br><span class="line">    // 找到增量组件，拉取数据 </span><br><span class="line">    const matched = router.getMatchedComponents(to) </span><br><span class="line">    const prevMatched = router.getMatchedComponents(from) </span><br><span class="line">    let diffed = false</span><br><span class="line">    const activated = matched.filter((c, i) =&gt; &#123;</span><br><span class="line">      return diffed || (diffed = (prevMatched[i] !== c))</span><br><span class="line">    &#125;)</span><br><span class="line">    // 组件数据通过执行asyncData方法获取</span><br><span class="line">    const asyncDataHooks = activated.map(c =&gt; c.asyncData).filter(_ =&gt; _)</span><br><span class="line">    if (!asyncDataHooks.length) &#123;</span><br><span class="line">      return next()</span><br><span class="line">    &#125;</span><br><span class="line">    // 要注意asyncData方法要返回promise，asyncData调用的vuex action也必须返回promise</span><br><span class="line">    Promise.all(asyncDataHooks.map(hook =&gt; hook(&#123; store, route: to &#125;)))</span><br><span class="line">      .then(() =&gt; &#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(next)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 将Vue实例挂载到dom中，完成浏览器端应用启动</span><br><span class="line">  app.$mount(&apos;#app&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// entry.server.js</span><br><span class="line">import &#123; createApp &#125; from &apos;./app&apos;</span><br><span class="line"></span><br><span class="line">export default context =&gt; &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    const &#123; app, router, store &#125; = createApp(context)</span><br><span class="line"></span><br><span class="line">    // 设置路由</span><br><span class="line">    router.push(context.url)</span><br><span class="line"></span><br><span class="line">    router.onReady(() =&gt; &#123;</span><br><span class="line">      const matchedComponents = router.getMatchedComponents()</span><br><span class="line">      if (!matchedComponents.length) &#123;</span><br><span class="line">        return reject(&#123; code: 404 &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 执行asyncData方法，预拉取数据</span><br><span class="line">      Promise.all(matchedComponents.map(Component =&gt; &#123;</span><br><span class="line">        if (Component.asyncData) &#123;</span><br><span class="line">          return Component.asyncData(&#123;</span><br><span class="line">            store: store,</span><br><span class="line">            route: router.currentRoute</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)).then(() =&gt; &#123;</span><br><span class="line">        // 将store的快照挂到ssr上下文上</span><br><span class="line">        context.state = store.state</span><br><span class="line">        resolve(app)</span><br><span class="line">      &#125;).catch(reject)</span><br><span class="line">    &#125;, reject)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// createStore</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">// createStore工厂方法</span><br><span class="line">export function createStore () &#123;</span><br><span class="line">  return new Vuex.Store(&#123;</span><br><span class="line">    // rootstate</span><br><span class="line">    state: &#123;</span><br><span class="line">      appName: &apos;appName&apos;,</span><br><span class="line">      title: &apos;home&apos;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    modules: &#123;</span><br><span class="line">      // ...</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    strict: process.env.NODE_ENV !== &apos;production&apos; // 线上环境关闭store检查</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// createRouter</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">// createRouter工厂方法</span><br><span class="line">export function createRouter () &#123;</span><br><span class="line">  return new Router(&#123;</span><br><span class="line">    mode: &apos;history&apos;, // 注意这里要使用history模式，因为hash不会发送到服务端</span><br><span class="line">    fallback: false,</span><br><span class="line">    routes: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &apos;/index&apos;,</span><br><span class="line">        name: &apos;index&apos;,</span><br><span class="line">        component: () =&gt; System.import(&apos;./index/index.vue&apos;) // 代码分片</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &apos;/detail/:aid&apos;,</span><br><span class="line">        name: &apos;detail&apos;,</span><br><span class="line">        component: () =&gt; System.import(&apos;./detail/detail.vue&apos;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // ...</span><br><span class="line">      &#123;</span><br><span class="line">        path: &apos;/&apos;,</span><br><span class="line">        redirect: &apos;/index&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-重构组件获取数据方式"><a href="#3-重构组件获取数据方式" class="headerlink" title="3. 重构组件获取数据方式"></a>3. 重构组件获取数据方式</h3><p>关于状态管理，要严格遵守Redux思想。建议把应用所有状态都存于store中，组件使用时再mapState下来，状态更改严格使用action的方式。另一个要提一点的是，action要返回promise。这样我们就可以使用asyncData方法获取组件数据了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const actions = &#123;</span><br><span class="line">  getArticleList (&#123;state, commit&#125;, curPageNum) &#123;</span><br><span class="line">    commit(FETCH_ARTICLE_LIST, curPageNum)</span><br><span class="line"></span><br><span class="line">    // action 要返回promise</span><br><span class="line">    return apis.getArticleList(&#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        size: state.pagi.itemsPerPage,</span><br><span class="line">        page: curPageNum</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then((res) =&gt; &#123;</span><br><span class="line">      // ...</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 组件asyncData实现</span><br><span class="line">export default &#123;</span><br><span class="line">  asyncData (&#123; store &#125;) &#123;</span><br><span class="line">    return store.dispatch(&apos;getArticleList&apos;, 1)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-SSR服务器实现"><a href="#4-SSR服务器实现" class="headerlink" title="4. SSR服务器实现"></a>4. SSR服务器实现</h3><p>在完成构建和代码改造后，如果一切顺利。我们能得到下面的打包文件：</p><p><img src="/images/ssr4.png" alt=""></p><p>这时，我们可以开始实现SSR服务端代码了。下面是我博客SSR实现（基于Koa）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// server.js</span><br><span class="line">const Koa = require(&apos;koa&apos;)</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const logger = require(&apos;./logger&apos;)</span><br><span class="line">const server = new Koa()</span><br><span class="line">const &#123; createBundleRenderer &#125; = require(&apos;vue-server-renderer&apos;)</span><br><span class="line">const templateHtml = require(&apos;fs&apos;).readFileSync(path.resolve(__dirname, &apos;./index.template.html&apos;), &apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line">let distPath = &apos;./dist&apos;</span><br><span class="line"></span><br><span class="line">const renderer = createBundleRenderer(require(`$&#123;distPath&#125;/vue-ssr-server-bundle.json`), &#123; </span><br><span class="line">  runInNewContext: false,</span><br><span class="line">  template: templateHtml, </span><br><span class="line">  clientManifest: require(`$&#123;distPath&#125;/vue-ssr-client-manifest.json`) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.use(function * (next) &#123;</span><br><span class="line">  let ctx = this</span><br><span class="line">  const context = &#123; url: ctx.req.url, pageTitle: &apos;default-title&apos; &#125;</span><br><span class="line"></span><br><span class="line">  // cgi请求，前端资源请求不能转到这里来。这里可以通过nginx做</span><br><span class="line">  if (/\.\w+$/.test(context.url)) &#123;</span><br><span class="line">    return yield next</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 注意这里也必须返回promise  </span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    renderer.renderToString(context, function (err, html) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        logger.error(`[error][ssr-error]: ` + err.stack)</span><br><span class="line">        return reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      ctx.status = 200</span><br><span class="line">      ctx.type = &apos;text/html; &apos;</span><br><span class="line">      ctx.body = html</span><br><span class="line">      resolve(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 错误处理</span><br><span class="line">server.on(&apos;error&apos;, function (err) &#123;</span><br><span class="line">  logger.error(&apos;[error][server-error]: &apos; + err.stack)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let port = 80</span><br><span class="line"></span><br><span class="line">server.listen(port, () =&gt; &#123;</span><br><span class="line">  logger.info(`[info]: server is deploy on port: $&#123;port&#125;`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-服务器部署"><a href="#5-服务器部署" class="headerlink" title="5. 服务器部署"></a>5. 服务器部署</h3><p>服务器部署，跟你的项目架构有关。比如我的博客项目在服务端有2个后端服务，一个数据库服务，nginx用于请求转发：</p><p><img src="/images/ssr5.png" alt=""></p><h3 id="6-遇到的问题及解决办法"><a href="#6-遇到的问题及解决办法" class="headerlink" title="6. 遇到的问题及解决办法"></a>6. 遇到的问题及解决办法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">加载不到组件的JS文件</span><br><span class="line">[vue-router] Failed to resolve async component default: Error: Cannot find module &apos;js\main1.js&apos;</span><br><span class="line">[vue-router] uncaught error during route navigation:</span><br><span class="line">解决办法：</span><br><span class="line">去掉webpack配置中的output.chunkFilename: getFileName(‘js/main[name]-$hash.js’)</span><br><span class="line"></span><br><span class="line">if you are using CommonsChunkPlugin, make sure to use it only in the client config because the server bundle requires a single entry chunk.</span><br><span class="line">所以对webpack.server.js不要对配置CommonsChunkPlugin,也不要设置output.chunkFilename</span><br><span class="line"></span><br><span class="line">代码高亮codeMirror使用到navigator对象，只能在浏览器环境运行</span><br><span class="line">把执行逻辑放到mounted回调中。实现不行，就封装一个异步组件，把组件的初始化放到mounted中：</span><br></pre></td></tr></table></figure><p>mounted () {<br>  let paragraph = require(‘./paragraph.vue’)<br>  Vue.component(‘paragraph’, paragraph)<br>  new Vue().$mount(‘#paragraph’)<br>},<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">串数据</span><br><span class="line">dispatch的action没有返回promise，保证返回promise即可</span><br><span class="line"></span><br><span class="line">路由跳转</span><br><span class="line">路由跳转使用router方法或标签，这两种方式能自适应浏览器端和服务端，不要使用a标签</span><br></pre></td></tr></table></figure></p><p>注：本文转自<a href="http://web.jobbole.com/93368/" target="_blank" rel="noopener">u3xyz</a>,仅供本人学习存档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要做SSR&quot;&gt;&lt;a href=&quot;#为什么要做SSR&quot; class=&quot;headerlink&quot; title=&quot;为什么要做SSR&quot;&gt;&lt;/a&gt;为什么要做SSR&lt;/h3&gt;&lt;p&gt;为了更好的seo抓取，当然，还有另一个原因是SSR概念现在在前端非常火。下面将详细介绍本博客
      
    
    </summary>
    
    
      <category term="Vue koa" scheme="http://tiandashu.github.io/tags/Vue-koa/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目部署资源路径问题</title>
    <link href="http://tiandashu.github.io/2018/06/07/Vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <id>http://tiandashu.github.io/2018/06/07/Vue项目部署资源路径问题/</id>
    <published>2018-06-07T10:28:32.000Z</published>
    <updated>2018-06-07T15:21:51.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文主要解决两个问题："><a href="#本文主要解决两个问题：" class="headerlink" title="本文主要解决两个问题："></a>本文主要解决两个问题：</h3><p>1、vue-cli发布时 js，css文件路径错误<br>2、vue-cli发布时js、css文件正常，但是图片路径错误</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h3><p>vue-cli 脚手架生成的默认打包配置文件情况下运行 npm run build 打包后，即可开始项目部署</p><p>项目部署根据公司要求不同大致分为一下俩种部署方式：</p><h3 id="1、服务器放置打包后生成的dist文件夹"><a href="#1、服务器放置打包后生成的dist文件夹" class="headerlink" title="1、服务器放置打包后生成的dist文件夹"></a>1、服务器放置打包后生成的dist文件夹</h3><p>此种部署方式，需要将config.js文件下index.js中的assersPublishPath，改为‘./’，</p><h3 id="2、项目部署后发现图片路径不对，在浏览器器中仔细分析加载的图片路径"><a href="#2、项目部署后发现图片路径不对，在浏览器器中仔细分析加载的图片路径" class="headerlink" title="2、项目部署后发现图片路径不对，在浏览器器中仔细分析加载的图片路径"></a>2、项目部署后发现图片路径不对，在浏览器器中仔细分析加载的图片路径</h3><p>分析：<br>正常路径应为<a href="http://localhost:3333/resume/dist/static/img/music2.3278dbf.png" target="_blank" rel="noopener">http://localhost:3333/resume/dist/static/img/music2.3278dbf.png</a><br>但是引用路径<a href="http://localhost:3333/resume/dist/static/css/static/img/music2.3278dbf.png，" target="_blank" rel="noopener">http://localhost:3333/resume/dist/static/css/static/img/music2.3278dbf.png，</a></p><p>对比一下发现多了两层，/static/css, 看来跟css 有一定关系~，这时候我们去看看css里面的引入路径<br>原来是css中的引入为static/img/***.jpg，但是css文件相对于index的相对路径为 /static/css,<br>解决办法：在build下utils.js中新增一下黑框括起来的代码即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (options.extract) &#123;</span><br><span class="line">    return ExtractTextPlugin.extract(&#123;</span><br><span class="line">    use: loaders,</span><br><span class="line">    fallback: &apos;vue-style-loader&apos;,</span><br><span class="line">    //线上环境打包资源问题</span><br><span class="line">    publicPath: &apos;../../&apos;  //（解释：pubicpath为打包后app.css至index.html的相对路径）</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    return [&apos;vue-style-loader&apos;].concat(loaders)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;本文主要解决两个问题：&quot;&gt;&lt;a href=&quot;#本文主要解决两个问题：&quot; class=&quot;headerlink&quot; title=&quot;本文主要解决两个问题：&quot;&gt;&lt;/a&gt;本文主要解决两个问题：&lt;/h3&gt;&lt;p&gt;1、vue-cli发布时 js，css文件路径错误&lt;br&gt;2、vue
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://tiandashu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>博客添加评论功能</title>
    <link href="http://tiandashu.github.io/2018/06/03/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>http://tiandashu.github.io/2018/06/03/博客添加评论功能/</id>
    <published>2018-06-03T10:28:32.000Z</published>
    <updated>2018-06-04T14:36:33.156Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-以安装来必力评论为例，大家自己根据实际情况决定。"><a href="#1-以安装来必力评论为例，大家自己根据实际情况决定。" class="headerlink" title="1.以安装来必力评论为例，大家自己根据实际情况决定。"></a>1.以安装来必力评论为例，大家自己根据实际情况决定。</h3><p><a href="http://www.laibili.com.cn/" target="_blank" rel="noopener">来必力官网</a></p><ul><li>注册来必力帐号</li><li>点击安装-选择city-获取uiduid<br><img src="/images/1.png" alt="步骤一"><br><img src="/images/2.png" alt="步骤二"><br><img src="/images/3.png" alt="步骤三"></li></ul><h3 id="2-在themes文件相下找见安装的的主题-config-yml添加如下代码"><a href="#2-在themes文件相下找见安装的的主题-config-yml添加如下代码" class="headerlink" title="2.在themes文件相下找见安装的的主题_config.yml添加如下代码"></a>2.在themes文件相下找见安装的的主题_config.yml添加如下代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 添加来比力评论</span><br><span class="line">livere:</span><br><span class="line">    on: true</span><br><span class="line">    livere_uid: MTAyMC8zNzAxMS8xMzU0Nw</span><br></pre></td></tr></table></figure><h3 id="3-在-partial目录下新建liver-ejs文件-代码如下："><a href="#3-在-partial目录下新建liver-ejs文件-代码如下：" class="headerlink" title="3.在_partial目录下新建liver.ejs文件,代码如下："></a>3.在_partial目录下新建liver.ejs文件,代码如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;livere&quot; id=&quot;comments&quot;&gt;</span><br><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;MTAyMC8zNzAxMS8xMzU0Nw==&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">       (function(d, s) &#123;</span><br><span class="line">           var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line">    </span><br><span class="line">           if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125;</span><br><span class="line">    </span><br><span class="line">           j = d.createElement(s);</span><br><span class="line">           j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;</span><br><span class="line">           j.async = true;</span><br><span class="line">    </span><br><span class="line">           e.parentNode.insertBefore(j, e);</span><br><span class="line">       &#125;)(document, &apos;script&apos;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure><h3 id="4-选择评论添加到的位置（文章下面）-代码中添加了三种评论选择自己的"><a href="#4-选择评论添加到的位置（文章下面）-代码中添加了三种评论选择自己的" class="headerlink" title="4.选择评论添加到的位置（文章下面）,代码中添加了三种评论选择自己的"></a>4.选择评论添加到的位置（文章下面）,代码中添加了三种评论选择自己的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (page.comments)&#123; %&gt;</span><br><span class="line">&lt;section id=&quot;comment&quot;&gt;</span><br><span class="line">  &lt;!-- &lt;h1 class=&quot;title&quot;&gt;&lt;%= __(&apos;comment&apos;) %&gt;&lt;/h1&gt; --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;% if(theme.disqus_shortname) &#123; %&gt;</span><br><span class="line">  &lt;div id=&quot;disqus_thread&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var disqus_config = function () &#123;</span><br><span class="line">          this.page.url = window.location.href;</span><br><span class="line">          this.page.identifier = &apos;&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;&apos;;</span><br><span class="line">          this.page.title = &apos;&lt;%= page.title %&gt;&apos;;</span><br><span class="line">      &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;% &#125; else if (theme.duoshuo_shortname) &#123; %&gt;</span><br><span class="line">    &lt;!-- 多说评论框 start --&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var duoshuoQuery = &#123;short_name:&quot;&lt;%= theme.duoshuo_shortname %&gt;&quot;&#125;;</span><br><span class="line">(function() &#123;</span><br><span class="line">var ds = document.createElement(&apos;script&apos;);</span><br><span class="line">ds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class="line">ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</span><br><span class="line">ds.charset = &apos;UTF-8&apos;;</span><br><span class="line">(document.getElementsByTagName(&apos;head&apos;)[0] </span><br><span class="line"> || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;&quot; data-title=&quot;&lt;%= page.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 多说评论框 end --&gt;</span><br><span class="line">  &lt;% &#125; else if (theme.livere.on) &#123; %&gt;</span><br><span class="line">    &lt;!-- 来比力评论框 start --&gt;</span><br><span class="line">        &lt;%- partial(&apos;livere&apos;) %&gt;</span><br><span class="line">    &lt;!-- 来比力评论框 end --&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="5-重启服务ok"><a href="#5-重启服务ok" class="headerlink" title="5.重启服务ok"></a>5.重启服务ok</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-以安装来必力评论为例，大家自己根据实际情况决定。&quot;&gt;&lt;a href=&quot;#1-以安装来必力评论为例，大家自己根据实际情况决定。&quot; class=&quot;headerlink&quot; title=&quot;1.以安装来必力评论为例，大家自己根据实际情况决定。&quot;&gt;&lt;/a&gt;1.以安装来必力
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://tiandashu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>flag</title>
    <link href="http://tiandashu.github.io/2018/05/31/flag/"/>
    <id>http://tiandashu.github.io/2018/05/31/flag/</id>
    <published>2018-05-31T11:47:50.000Z</published>
    <updated>2018-06-04T14:06:51.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="还有理想吗"><a href="#还有理想吗" class="headerlink" title="还有理想吗"></a>还有理想吗</h3><p>理想是什么？<br>有人说把小时候吹过的牛都实现了那就是理想；也有人说理想仅仅是都美好生活憧憬。</p><p>每天坚持一点点很小的事情，每天都变得比昨天优秀。在经历挫折和磨难后仍然愿意相信自己，把曾经以为很遥远的事情做的优秀。<br>1.每天坚持看一篇技术文章<br>2.每天保持高效<br>3.每天坚持锻炼</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;还有理想吗&quot;&gt;&lt;a href=&quot;#还有理想吗&quot; class=&quot;headerlink&quot; title=&quot;还有理想吗&quot;&gt;&lt;/a&gt;还有理想吗&lt;/h3&gt;&lt;p&gt;理想是什么？&lt;br&gt;有人说把小时候吹过的牛都实现了那就是理想；也有人说理想仅仅是都美好生活憧憬。&lt;/p&gt;
&lt;p&gt;每天
      
    
    </summary>
    
    
      <category term="self" scheme="http://tiandashu.github.io/tags/self/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建并部署到gitpages</title>
    <link href="http://tiandashu.github.io/2018/05/30/hexo%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0gitpages/"/>
    <id>http://tiandashu.github.io/2018/05/30/hexo搭建并部署到gitpages/</id>
    <published>2018-05-30T14:16:53.000Z</published>
    <updated>2018-06-10T15:47:46.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装node环境并配置"><a href="#1-安装node环境并配置" class="headerlink" title="1.安装node环境并配置"></a>1.安装node环境并配置</h3><p>More info: <a href="https://jingyan.baidu.com/article/c85b7a64b6498c003aac956a.html" target="_blank" rel="noopener">node</a></p><h3 id="2-安装git环境并配置"><a href="#2-安装git环境并配置" class="headerlink" title="2.安装git环境并配置"></a>2.安装git环境并配置</h3><p>More info: <a href="https://jingyan.baidu.com/article/9f7e7ec0b17cac6f2815548d.html" target="_blank" rel="noopener">git</a></p><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>More info: <a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">Hexo</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="4-Hexo和git关联"><a href="#4-Hexo和git关联" class="headerlink" title="4.Hexo和git关联"></a>4.Hexo和git关联</h3><p>4.1 github新建仓库 github用户名.github.io (因为要使用github的page服务，所以仓库名必须是这个格式)<br>4.2 在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。<br>4.3 将ssh添加到github，输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了<br>4.4 配置Deployment，在hexo项目中，找到_config.yml文件，修改repo值（在末尾）可以配置多个，一定要注意空格格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository: git@github.com:tiandashu/tiandashu.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>4.5 在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save<br>4.6 使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了<br>4.7 部署成功后访问你的地址：<a href="http://github用户名.github.io。那么将看到生成的文章" target="_blank" rel="noopener">http://github用户名.github.io。那么将看到生成的文章</a></p><h3 id="5-指定域名"><a href="#5-指定域名" class="headerlink" title="5.指定域名"></a>5.指定域名</h3><p>5.1 在hexo项目的source文件夹下面新建 CNAME文件<br>5.2 在CNAME里写上域名 tianaitian.com<br>5.3 获取<a href="https://github用户名.github.io" target="_blank" rel="noopener">https://github用户名.github.io</a> 的ip地址：ping github用户名.github.io<br>5.4 使用域名解析，本人使用阿里的服务</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-安装node环境并配置&quot;&gt;&lt;a href=&quot;#1-安装node环境并配置&quot; class=&quot;headerlink&quot; title=&quot;1.安装node环境并配置&quot;&gt;&lt;/a&gt;1.安装node环境并配置&lt;/h3&gt;&lt;p&gt;More info: &lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="hexo" scheme="http://tiandashu.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://tiandashu.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
