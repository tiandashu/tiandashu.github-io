<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>田大叔的博客</title>
  
  <subtitle>个人简历</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tiandashu.github.io/"/>
  <updated>2018-06-07T15:21:51.882Z</updated>
  <id>http://tiandashu.github.io/</id>
  
  <author>
    <name>田大叔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue项目部署资源路径问题</title>
    <link href="http://tiandashu.github.io/2018/06/07/Vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <id>http://tiandashu.github.io/2018/06/07/Vue项目部署资源路径问题/</id>
    <published>2018-06-07T10:28:32.000Z</published>
    <updated>2018-06-07T15:21:51.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文主要解决两个问题："><a href="#本文主要解决两个问题：" class="headerlink" title="本文主要解决两个问题："></a>本文主要解决两个问题：</h3><p>1、vue-cli发布时 js，css文件路径错误<br>2、vue-cli发布时js、css文件正常，但是图片路径错误</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h3><p>vue-cli 脚手架生成的默认打包配置文件情况下运行 npm run build 打包后，即可开始项目部署</p><p>项目部署根据公司要求不同大致分为一下俩种部署方式：</p><h3 id="1、服务器放置打包后生成的dist文件夹"><a href="#1、服务器放置打包后生成的dist文件夹" class="headerlink" title="1、服务器放置打包后生成的dist文件夹"></a>1、服务器放置打包后生成的dist文件夹</h3><p>此种部署方式，需要将config.js文件下index.js中的assersPublishPath，改为‘./’，</p><h3 id="2、项目部署后发现图片路径不对，在浏览器器中仔细分析加载的图片路径"><a href="#2、项目部署后发现图片路径不对，在浏览器器中仔细分析加载的图片路径" class="headerlink" title="2、项目部署后发现图片路径不对，在浏览器器中仔细分析加载的图片路径"></a>2、项目部署后发现图片路径不对，在浏览器器中仔细分析加载的图片路径</h3><p>分析：<br>正常路径应为<a href="http://localhost:3333/resume/dist/static/img/music2.3278dbf.png" target="_blank" rel="noopener">http://localhost:3333/resume/dist/static/img/music2.3278dbf.png</a><br>但是引用路径<a href="http://localhost:3333/resume/dist/static/css/static/img/music2.3278dbf.png，" target="_blank" rel="noopener">http://localhost:3333/resume/dist/static/css/static/img/music2.3278dbf.png，</a></p><p>对比一下发现多了两层，/static/css, 看来跟css 有一定关系~，这时候我们去看看css里面的引入路径<br>原来是css中的引入为static/img/***.jpg，但是css文件相对于index的相对路径为 /static/css,<br>解决办法：在build下utils.js中新增一下黑框括起来的代码即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (options.extract) &#123;</span><br><span class="line">    return ExtractTextPlugin.extract(&#123;</span><br><span class="line">    use: loaders,</span><br><span class="line">    fallback: &apos;vue-style-loader&apos;,</span><br><span class="line">    //线上环境打包资源问题</span><br><span class="line">    publicPath: &apos;../../&apos;  //（解释：pubicpath为打包后app.css至index.html的相对路径）</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    return [&apos;vue-style-loader&apos;].concat(loaders)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;本文主要解决两个问题：&quot;&gt;&lt;a href=&quot;#本文主要解决两个问题：&quot; class=&quot;headerlink&quot; title=&quot;本文主要解决两个问题：&quot;&gt;&lt;/a&gt;本文主要解决两个问题：&lt;/h3&gt;&lt;p&gt;1、vue-cli发布时 js，css文件路径错误&lt;br&gt;2、vue
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://tiandashu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目SSR改造实战</title>
    <link href="http://tiandashu.github.io/2018/06/07/Vue%E9%A1%B9%E7%9B%AESSR%E6%94%B9%E9%80%A0%E5%AE%9E%E6%88%98/"/>
    <id>http://tiandashu.github.io/2018/06/07/Vue项目SSR改造实战/</id>
    <published>2018-06-07T10:28:32.000Z</published>
    <updated>2018-06-07T14:54:03.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要做SSR"><a href="#为什么要做SSR" class="headerlink" title="为什么要做SSR"></a>为什么要做SSR</h3><p>为了更好的seo抓取，当然，还有另一个原因是SSR概念现在在前端非常火。下面将详细介绍本博客项目SSR全过程。</p><h3 id="SSR改造实战"><a href="#SSR改造实战" class="headerlink" title="SSR改造实战"></a>SSR改造实战</h3><p>总的来说SSR改造还是相当容易的。推荐在动手之前，先了解<a href="https://ssr.vuejs.org/zh/guide/non-node.html" target="_blank" rel="noopener">Vue SSR指南官方文档</a>和官方<a href="https://github.com/vuejs/vue-hackernews-2.0/" target="_blank" rel="noopener">Vue SSR Demo</a>，这会让我们事半功倍。</p><h3 id="1-构建改造"><a href="#1-构建改造" class="headerlink" title="1. 构建改造"></a>1. 构建改造</h3><p><img src="/images/ssr1.png" alt=""><br>上图是Vue官方的SSR原理介绍图片。从这张图片，我们可以知道：我们需要通过Webpack打包生成两份bundle文件：<br>Client Bundle，给浏览器用。和纯Vue前端项目Bundle类似<br>Server Bundle，供服务端SSR使用，一个json文件<br>不管你项目先前是什么样子，是否是使用vue-cli生成的。都会有这个构建改造过程。在构建改造这里会用到 vue-server-renderer 库，这里要注意的是 vue-server-renderer 版本要与Vue版本一样。下图是我的构建文件目录：<br><img src="/images/ssr2.png" alt=""></p><p>util.js 提供一些公共方法<br>webpack.base.js是公共的配置<br>webpack.client.js 是生成Client Bundle的配置。核心配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const VueSSRClientPlugin = require(&apos;vue-server-renderer/client-plugin&apos;)</span><br><span class="line">const config = merge(baseConfig, &#123;</span><br><span class="line">  target: &apos;web&apos;,</span><br><span class="line">  entry: &apos;./src/entry.client.js&apos;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.DefinePlugin(&#123;</span><br><span class="line">      &apos;process.env.NODE_ENV&apos;: JSON.stringify(process.env.NODE_ENV || &apos;development&apos;),</span><br><span class="line">      &apos;process.env.VUE_ENV&apos;: &apos;&quot;client&quot;&apos;</span><br><span class="line">    &#125;),</span><br><span class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: &apos;vender&apos;,</span><br><span class="line">      minChunks: 2</span><br><span class="line">    &#125;),</span><br><span class="line">    // extract webpack runtime &amp; manifest to avoid vendor chunk hash changing</span><br><span class="line">    // on every build.</span><br><span class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: &apos;manifest&apos;</span><br><span class="line">    &#125;),</span><br><span class="line">    new VueSSRClientPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>webpack.server.js 是生成Server Bundle的配置，核心配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const VueSSRServerPlugin = require(&apos;vue-server-renderer/server-plugin&apos;)</span><br><span class="line">const config = merge(baseConfig, &#123;</span><br><span class="line">  target: &apos;node&apos;,</span><br><span class="line">  devtool: &apos;#source-map&apos;,</span><br><span class="line">  entry: &apos;./src/entry.server.js&apos;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    libraryTarget: &apos;commonjs2&apos;,</span><br><span class="line">    filename: &apos;server-bundle.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  externals: nodeExternals(&#123;</span><br><span class="line">    // do not externalize CSS files in case we need to import it from a dep</span><br><span class="line">    whitelist: /\.css$/</span><br><span class="line">  &#125;),</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.DefinePlugin(&#123;</span><br><span class="line">      &apos;process.env.NODE_ENV&apos;: JSON.stringify(process.env.NODE_ENV || &apos;development&apos;),</span><br><span class="line">      &apos;process.env.VUE_ENV&apos;: &apos;&quot;server&quot;&apos;</span><br><span class="line">    &#125;),</span><br><span class="line">    new VueSSRServerPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="2-代码改造"><a href="#2-代码改造" class="headerlink" title="2. 代码改造"></a>2. 代码改造</h3><p>2.1 必须使用VueRouter, Vuex。ajax库建议使用axios<br>可能你的项目没有使用VueRouter或Vuex。但遗憾的是，Vue-SSR必须基于 Vue + VueRouter + Vuex。Vuex官方没有提，但其实文档和Demo都是基于Vuex。我的博客以前也没有用Vuex，但经过一翻折腾后，还是乖乖加上了Vuex。另外，因为代码要能同时在浏览器和Node.js环境中运行，所以ajax库建议使用axios这样的跨平台库。</p><p>2.2 两个打包入口（entry），重构app, store, router, 为每个对象增加工厂方法createXXX</p><p>每个用户通过浏览器访问Vue页面时，都是一个全新的上下文，但在服务端，应用启动后就一直运行着，处理每个用户请求的都是在同一个应用上下文中。为了不串数据，需要为每次SSR请求，创建全新的app, store, router。</p><p><img src="/images/ssr3.png" alt=""><br>上图是我的项目文件目录。</p><p>app.js， 通用的启动Vue应用代码<br>App.vue，Vue应用根组件<br>entry.client.js，浏览器环境入口<br>entry.server.js，服务器环境入口<br>index.html，html模板<br>再看一下具体实现的核心代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// app.js</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App.vue&apos; // 根组件</span><br><span class="line">import &#123;createRouter&#125; from &apos;./routers/index&apos; </span><br><span class="line">import &#123;createStore&#125; from &apos;./vuex/store&apos;</span><br><span class="line">import &#123;sync&#125; from &apos;vuex-router-sync&apos; // 把当VueRouter状态同步到Vuex中</span><br><span class="line"></span><br><span class="line">// createApp工厂方法</span><br><span class="line">export function createApp (ssrContext) &#123;</span><br><span class="line">  let router = createRouter() // 创建全新router实例</span><br><span class="line">  let store = createStore() // 创建全新store实例</span><br><span class="line"></span><br><span class="line">  // 同步路由状态到store中</span><br><span class="line">  sync(store, router)</span><br><span class="line">  </span><br><span class="line">  // 创建Vue应用</span><br><span class="line">  const app = new Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    ssrContext,</span><br><span class="line">    render: h =&gt; h(App)</span><br><span class="line">  &#125;)</span><br><span class="line">  return &#123;app, router, store&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// entry.client.js </span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import &#123; createApp &#125; from &apos;./app&apos;</span><br><span class="line">const &#123; app, router, store &#125; = createApp()</span><br><span class="line"></span><br><span class="line">// 如果有__INITIAL_STATE__变量，则将store的状态用它替换</span><br><span class="line">if (window.__INITIAL_STATE__) &#123;</span><br><span class="line">  store.replaceState(window.__INITIAL_STATE__)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.onReady(() =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">  // 通过路由勾子，执行拉取数据逻辑</span><br><span class="line">  router.beforeResolve((to, from, next) =&gt; &#123;</span><br><span class="line">    // 找到增量组件，拉取数据 </span><br><span class="line">    const matched = router.getMatchedComponents(to) </span><br><span class="line">    const prevMatched = router.getMatchedComponents(from) </span><br><span class="line">    let diffed = false</span><br><span class="line">    const activated = matched.filter((c, i) =&gt; &#123;</span><br><span class="line">      return diffed || (diffed = (prevMatched[i] !== c))</span><br><span class="line">    &#125;)</span><br><span class="line">    // 组件数据通过执行asyncData方法获取</span><br><span class="line">    const asyncDataHooks = activated.map(c =&gt; c.asyncData).filter(_ =&gt; _)</span><br><span class="line">    if (!asyncDataHooks.length) &#123;</span><br><span class="line">      return next()</span><br><span class="line">    &#125;</span><br><span class="line">    // 要注意asyncData方法要返回promise，asyncData调用的vuex action也必须返回promise</span><br><span class="line">    Promise.all(asyncDataHooks.map(hook =&gt; hook(&#123; store, route: to &#125;)))</span><br><span class="line">      .then(() =&gt; &#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(next)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 将Vue实例挂载到dom中，完成浏览器端应用启动</span><br><span class="line">  app.$mount(&apos;#app&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// entry.server.js</span><br><span class="line">import &#123; createApp &#125; from &apos;./app&apos;</span><br><span class="line"></span><br><span class="line">export default context =&gt; &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    const &#123; app, router, store &#125; = createApp(context)</span><br><span class="line"></span><br><span class="line">    // 设置路由</span><br><span class="line">    router.push(context.url)</span><br><span class="line"></span><br><span class="line">    router.onReady(() =&gt; &#123;</span><br><span class="line">      const matchedComponents = router.getMatchedComponents()</span><br><span class="line">      if (!matchedComponents.length) &#123;</span><br><span class="line">        return reject(&#123; code: 404 &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 执行asyncData方法，预拉取数据</span><br><span class="line">      Promise.all(matchedComponents.map(Component =&gt; &#123;</span><br><span class="line">        if (Component.asyncData) &#123;</span><br><span class="line">          return Component.asyncData(&#123;</span><br><span class="line">            store: store,</span><br><span class="line">            route: router.currentRoute</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)).then(() =&gt; &#123;</span><br><span class="line">        // 将store的快照挂到ssr上下文上</span><br><span class="line">        context.state = store.state</span><br><span class="line">        resolve(app)</span><br><span class="line">      &#125;).catch(reject)</span><br><span class="line">    &#125;, reject)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// createStore</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">// createStore工厂方法</span><br><span class="line">export function createStore () &#123;</span><br><span class="line">  return new Vuex.Store(&#123;</span><br><span class="line">    // rootstate</span><br><span class="line">    state: &#123;</span><br><span class="line">      appName: &apos;appName&apos;,</span><br><span class="line">      title: &apos;home&apos;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    modules: &#123;</span><br><span class="line">      // ...</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    strict: process.env.NODE_ENV !== &apos;production&apos; // 线上环境关闭store检查</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// createRouter</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">// createRouter工厂方法</span><br><span class="line">export function createRouter () &#123;</span><br><span class="line">  return new Router(&#123;</span><br><span class="line">    mode: &apos;history&apos;, // 注意这里要使用history模式，因为hash不会发送到服务端</span><br><span class="line">    fallback: false,</span><br><span class="line">    routes: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &apos;/index&apos;,</span><br><span class="line">        name: &apos;index&apos;,</span><br><span class="line">        component: () =&gt; System.import(&apos;./index/index.vue&apos;) // 代码分片</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &apos;/detail/:aid&apos;,</span><br><span class="line">        name: &apos;detail&apos;,</span><br><span class="line">        component: () =&gt; System.import(&apos;./detail/detail.vue&apos;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // ...</span><br><span class="line">      &#123;</span><br><span class="line">        path: &apos;/&apos;,</span><br><span class="line">        redirect: &apos;/index&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-重构组件获取数据方式"><a href="#3-重构组件获取数据方式" class="headerlink" title="3. 重构组件获取数据方式"></a>3. 重构组件获取数据方式</h3><p>关于状态管理，要严格遵守Redux思想。建议把应用所有状态都存于store中，组件使用时再mapState下来，状态更改严格使用action的方式。另一个要提一点的是，action要返回promise。这样我们就可以使用asyncData方法获取组件数据了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const actions = &#123;</span><br><span class="line">  getArticleList (&#123;state, commit&#125;, curPageNum) &#123;</span><br><span class="line">    commit(FETCH_ARTICLE_LIST, curPageNum)</span><br><span class="line"></span><br><span class="line">    // action 要返回promise</span><br><span class="line">    return apis.getArticleList(&#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        size: state.pagi.itemsPerPage,</span><br><span class="line">        page: curPageNum</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then((res) =&gt; &#123;</span><br><span class="line">      // ...</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 组件asyncData实现</span><br><span class="line">export default &#123;</span><br><span class="line">  asyncData (&#123; store &#125;) &#123;</span><br><span class="line">    return store.dispatch(&apos;getArticleList&apos;, 1)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-SSR服务器实现"><a href="#4-SSR服务器实现" class="headerlink" title="4. SSR服务器实现"></a>4. SSR服务器实现</h3><p>在完成构建和代码改造后，如果一切顺利。我们能得到下面的打包文件：</p><p><img src="/images/ssr4.png" alt=""></p><p>这时，我们可以开始实现SSR服务端代码了。下面是我博客SSR实现（基于Koa）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// server.js</span><br><span class="line">const Koa = require(&apos;koa&apos;)</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const logger = require(&apos;./logger&apos;)</span><br><span class="line">const server = new Koa()</span><br><span class="line">const &#123; createBundleRenderer &#125; = require(&apos;vue-server-renderer&apos;)</span><br><span class="line">const templateHtml = require(&apos;fs&apos;).readFileSync(path.resolve(__dirname, &apos;./index.template.html&apos;), &apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line">let distPath = &apos;./dist&apos;</span><br><span class="line"></span><br><span class="line">const renderer = createBundleRenderer(require(`$&#123;distPath&#125;/vue-ssr-server-bundle.json`), &#123; </span><br><span class="line">  runInNewContext: false,</span><br><span class="line">  template: templateHtml, </span><br><span class="line">  clientManifest: require(`$&#123;distPath&#125;/vue-ssr-client-manifest.json`) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.use(function * (next) &#123;</span><br><span class="line">  let ctx = this</span><br><span class="line">  const context = &#123; url: ctx.req.url, pageTitle: &apos;default-title&apos; &#125;</span><br><span class="line"></span><br><span class="line">  // cgi请求，前端资源请求不能转到这里来。这里可以通过nginx做</span><br><span class="line">  if (/\.\w+$/.test(context.url)) &#123;</span><br><span class="line">    return yield next</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 注意这里也必须返回promise  </span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    renderer.renderToString(context, function (err, html) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        logger.error(`[error][ssr-error]: ` + err.stack)</span><br><span class="line">        return reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      ctx.status = 200</span><br><span class="line">      ctx.type = &apos;text/html; &apos;</span><br><span class="line">      ctx.body = html</span><br><span class="line">      resolve(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 错误处理</span><br><span class="line">server.on(&apos;error&apos;, function (err) &#123;</span><br><span class="line">  logger.error(&apos;[error][server-error]: &apos; + err.stack)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let port = 80</span><br><span class="line"></span><br><span class="line">server.listen(port, () =&gt; &#123;</span><br><span class="line">  logger.info(`[info]: server is deploy on port: $&#123;port&#125;`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-服务器部署"><a href="#5-服务器部署" class="headerlink" title="5. 服务器部署"></a>5. 服务器部署</h3><p>服务器部署，跟你的项目架构有关。比如我的博客项目在服务端有2个后端服务，一个数据库服务，nginx用于请求转发：</p><p><img src="/images/ssr5.png" alt=""></p><h3 id="6-遇到的问题及解决办法"><a href="#6-遇到的问题及解决办法" class="headerlink" title="6. 遇到的问题及解决办法"></a>6. 遇到的问题及解决办法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">加载不到组件的JS文件</span><br><span class="line">[vue-router] Failed to resolve async component default: Error: Cannot find module &apos;js\main1.js&apos;</span><br><span class="line">[vue-router] uncaught error during route navigation:</span><br><span class="line">解决办法：</span><br><span class="line">去掉webpack配置中的output.chunkFilename: getFileName(‘js/main[name]-$hash.js’)</span><br><span class="line"></span><br><span class="line">if you are using CommonsChunkPlugin, make sure to use it only in the client config because the server bundle requires a single entry chunk.</span><br><span class="line">所以对webpack.server.js不要对配置CommonsChunkPlugin,也不要设置output.chunkFilename</span><br><span class="line"></span><br><span class="line">代码高亮codeMirror使用到navigator对象，只能在浏览器环境运行</span><br><span class="line">把执行逻辑放到mounted回调中。实现不行，就封装一个异步组件，把组件的初始化放到mounted中：</span><br></pre></td></tr></table></figure><p>mounted () {<br>  let paragraph = require(‘./paragraph.vue’)<br>  Vue.component(‘paragraph’, paragraph)<br>  new Vue().$mount(‘#paragraph’)<br>},<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">串数据</span><br><span class="line">dispatch的action没有返回promise，保证返回promise即可</span><br><span class="line"></span><br><span class="line">路由跳转</span><br><span class="line">路由跳转使用router方法或标签，这两种方式能自适应浏览器端和服务端，不要使用a标签</span><br></pre></td></tr></table></figure></p><p>注：本文转自<a href="http://web.jobbole.com/93368/" target="_blank" rel="noopener">u3xyz</a>,仅供本人学习存档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要做SSR&quot;&gt;&lt;a href=&quot;#为什么要做SSR&quot; class=&quot;headerlink&quot; title=&quot;为什么要做SSR&quot;&gt;&lt;/a&gt;为什么要做SSR&lt;/h3&gt;&lt;p&gt;为了更好的seo抓取，当然，还有另一个原因是SSR概念现在在前端非常火。下面将详细介绍本博客
      
    
    </summary>
    
    
      <category term="Vue koa" scheme="http://tiandashu.github.io/tags/Vue-koa/"/>
    
  </entry>
  
  <entry>
    <title>博客添加评论功能</title>
    <link href="http://tiandashu.github.io/2018/06/03/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>http://tiandashu.github.io/2018/06/03/博客添加评论功能/</id>
    <published>2018-06-03T10:28:32.000Z</published>
    <updated>2018-06-04T14:36:33.156Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-以安装来必力评论为例，大家自己根据实际情况决定。"><a href="#1-以安装来必力评论为例，大家自己根据实际情况决定。" class="headerlink" title="1.以安装来必力评论为例，大家自己根据实际情况决定。"></a>1.以安装来必力评论为例，大家自己根据实际情况决定。</h3><p><a href="http://www.laibili.com.cn/" target="_blank" rel="noopener">来必力官网</a></p><ul><li>注册来必力帐号</li><li>点击安装-选择city-获取uiduid<br><img src="/images/1.png" alt="步骤一"><br><img src="/images/2.png" alt="步骤二"><br><img src="/images/3.png" alt="步骤三"></li></ul><h3 id="2-在themes文件相下找见安装的的主题-config-yml添加如下代码"><a href="#2-在themes文件相下找见安装的的主题-config-yml添加如下代码" class="headerlink" title="2.在themes文件相下找见安装的的主题_config.yml添加如下代码"></a>2.在themes文件相下找见安装的的主题_config.yml添加如下代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 添加来比力评论</span><br><span class="line">livere:</span><br><span class="line">    on: true</span><br><span class="line">    livere_uid: MTAyMC8zNzAxMS8xMzU0Nw</span><br></pre></td></tr></table></figure><h3 id="3-在-partial目录下新建liver-ejs文件-代码如下："><a href="#3-在-partial目录下新建liver-ejs文件-代码如下：" class="headerlink" title="3.在_partial目录下新建liver.ejs文件,代码如下："></a>3.在_partial目录下新建liver.ejs文件,代码如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;livere&quot; id=&quot;comments&quot;&gt;</span><br><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;MTAyMC8zNzAxMS8xMzU0Nw==&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">       (function(d, s) &#123;</span><br><span class="line">           var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line">    </span><br><span class="line">           if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125;</span><br><span class="line">    </span><br><span class="line">           j = d.createElement(s);</span><br><span class="line">           j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;</span><br><span class="line">           j.async = true;</span><br><span class="line">    </span><br><span class="line">           e.parentNode.insertBefore(j, e);</span><br><span class="line">       &#125;)(document, &apos;script&apos;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure><h3 id="4-选择评论添加到的位置（文章下面）-代码中添加了三种评论选择自己的"><a href="#4-选择评论添加到的位置（文章下面）-代码中添加了三种评论选择自己的" class="headerlink" title="4.选择评论添加到的位置（文章下面）,代码中添加了三种评论选择自己的"></a>4.选择评论添加到的位置（文章下面）,代码中添加了三种评论选择自己的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (page.comments)&#123; %&gt;</span><br><span class="line">&lt;section id=&quot;comment&quot;&gt;</span><br><span class="line">  &lt;!-- &lt;h1 class=&quot;title&quot;&gt;&lt;%= __(&apos;comment&apos;) %&gt;&lt;/h1&gt; --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;% if(theme.disqus_shortname) &#123; %&gt;</span><br><span class="line">  &lt;div id=&quot;disqus_thread&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var disqus_config = function () &#123;</span><br><span class="line">          this.page.url = window.location.href;</span><br><span class="line">          this.page.identifier = &apos;&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;&apos;;</span><br><span class="line">          this.page.title = &apos;&lt;%= page.title %&gt;&apos;;</span><br><span class="line">      &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;% &#125; else if (theme.duoshuo_shortname) &#123; %&gt;</span><br><span class="line">    &lt;!-- 多说评论框 start --&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var duoshuoQuery = &#123;short_name:&quot;&lt;%= theme.duoshuo_shortname %&gt;&quot;&#125;;</span><br><span class="line">(function() &#123;</span><br><span class="line">var ds = document.createElement(&apos;script&apos;);</span><br><span class="line">ds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class="line">ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</span><br><span class="line">ds.charset = &apos;UTF-8&apos;;</span><br><span class="line">(document.getElementsByTagName(&apos;head&apos;)[0] </span><br><span class="line"> || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;&quot; data-title=&quot;&lt;%= page.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 多说评论框 end --&gt;</span><br><span class="line">  &lt;% &#125; else if (theme.livere.on) &#123; %&gt;</span><br><span class="line">    &lt;!-- 来比力评论框 start --&gt;</span><br><span class="line">        &lt;%- partial(&apos;livere&apos;) %&gt;</span><br><span class="line">    &lt;!-- 来比力评论框 end --&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="5-重启服务ok"><a href="#5-重启服务ok" class="headerlink" title="5.重启服务ok"></a>5.重启服务ok</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-以安装来必力评论为例，大家自己根据实际情况决定。&quot;&gt;&lt;a href=&quot;#1-以安装来必力评论为例，大家自己根据实际情况决定。&quot; class=&quot;headerlink&quot; title=&quot;1.以安装来必力评论为例，大家自己根据实际情况决定。&quot;&gt;&lt;/a&gt;1.以安装来必力
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://tiandashu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>flag</title>
    <link href="http://tiandashu.github.io/2018/05/31/flag/"/>
    <id>http://tiandashu.github.io/2018/05/31/flag/</id>
    <published>2018-05-31T11:47:50.000Z</published>
    <updated>2018-06-04T14:06:51.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="还有理想吗"><a href="#还有理想吗" class="headerlink" title="还有理想吗"></a>还有理想吗</h3><p>理想是什么？<br>有人说把小时候吹过的牛都实现了那就是理想；也有人说理想仅仅是都美好生活憧憬。</p><p>每天坚持一点点很小的事情，每天都变得比昨天优秀。在经历挫折和磨难后仍然愿意相信自己，把曾经以为很遥远的事情做的优秀。<br>1.每天坚持看一篇技术文章<br>2.每天保持高效<br>3.每天坚持锻炼</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;还有理想吗&quot;&gt;&lt;a href=&quot;#还有理想吗&quot; class=&quot;headerlink&quot; title=&quot;还有理想吗&quot;&gt;&lt;/a&gt;还有理想吗&lt;/h3&gt;&lt;p&gt;理想是什么？&lt;br&gt;有人说把小时候吹过的牛都实现了那就是理想；也有人说理想仅仅是都美好生活憧憬。&lt;/p&gt;
&lt;p&gt;每天
      
    
    </summary>
    
    
      <category term="self" scheme="http://tiandashu.github.io/tags/self/"/>
    
  </entry>
  
  <entry>
    <title>hexo的搭建并部署到gitpages</title>
    <link href="http://tiandashu.github.io/2018/05/30/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0gitpages/"/>
    <id>http://tiandashu.github.io/2018/05/30/hexo的搭建并部署到gitpages/</id>
    <published>2018-05-30T14:16:53.000Z</published>
    <updated>2018-06-07T14:57:17.799Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装node环境并配置"><a href="#1-安装node环境并配置" class="headerlink" title="1.安装node环境并配置"></a>1.安装node环境并配置</h3><p>More info: <a href="https://jingyan.baidu.com/article/c85b7a64b6498c003aac956a.html" target="_blank" rel="noopener">node</a></p><h3 id="2-安装git环境并配置"><a href="#2-安装git环境并配置" class="headerlink" title="2.安装git环境并配置"></a>2.安装git环境并配置</h3><p>More info: <a href="https://jingyan.baidu.com/article/9f7e7ec0b17cac6f2815548d.html" target="_blank" rel="noopener">git</a></p><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>More info: <a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">Hexo</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="4-Hexo和git关联"><a href="#4-Hexo和git关联" class="headerlink" title="4.Hexo和git关联"></a>4.Hexo和git关联</h3><p>4.1 github新建仓库 github用户名.github.io (因为要使用github的page服务，所以仓库名必须是这个格式)<br>4.2 在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。<br>4.3 将ssh添加到github，输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了<br>4.4 配置Deployment，在hexo项目中，找到_config.yml文件，修改repo值（在末尾）可以配置多个，一定要注意空格格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository: git@github.com:tiandashu/tiandashu.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>4.5 在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save<br>4.6 使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了<br>4.7 部署成功后访问你的地址：<a href="http://github用户名.github.io。那么将看到生成的文章" target="_blank" rel="noopener">http://github用户名.github.io。那么将看到生成的文章</a></p><h3 id="5-指定域名"><a href="#5-指定域名" class="headerlink" title="5.指定域名"></a>5.指定域名</h3><p>5.1 在hexo项目的source文件夹下面新建 CNAME文件<br>5.2 在CNAME里写上域名 tianaitian.com<br>5.3 获取<a href="https://github用户名.github.io" target="_blank" rel="noopener">https://github用户名.github.io</a> 的ip地址：ping github用户名.github.io<br>5.4 使用域名解析，本人使用阿里的服务</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-安装node环境并配置&quot;&gt;&lt;a href=&quot;#1-安装node环境并配置&quot; class=&quot;headerlink&quot; title=&quot;1.安装node环境并配置&quot;&gt;&lt;/a&gt;1.安装node环境并配置&lt;/h3&gt;&lt;p&gt;More info: &lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="hexo" scheme="http://tiandashu.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://tiandashu.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
